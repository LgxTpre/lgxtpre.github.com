{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 \u6b22\u8fce\u6765\u5230 \\(\\mathcal{LgxTpre}\\) \u7684\u4ee3\u7801\u4ed3\u5e93\u5440\uff01~ \u4e3a\u4e86\u4fdd\u8bc1\u60a8\u7684\u4f7f\u7528\u4f53\u9a8c\uff0c\u4e0b\u9762\u5c06\u4f1a\u5bf9\u4e00\u4e9b\u5185\u5bb9\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8bf7\u67e5\u770b\u5176\u662f\u5426\u6b63\u786e qwq\u3002 \u4e0b\u9762\u662f\u6570\u5b66\u516c\u5f0f \u00b6 \u884c\u5185\u516c\u5f0f\uff1a \\(f(x)=\\sum_{n=0}^m a_nx^n\\) \u884c\u95f4\u516c\u5f0f\uff1a $$ h(x) = \\sum_{d\\mid x} f(d)g(\\frac xd) = \\sum_{ab=x}f(a)g(b) $$ \u4e0b\u9762\u662f\u8868\u683c \u00b6 Language Ratings Python 14.83% C 14.73% Java 13.56% C++ 13.29% C# 7.57% \u4e0b\u9762\u662f\u4ee3\u7801\u6bb5 \u00bu6ca1\u5565\u6d3b\u597d\u6574\u4e86\uff0c\u7ed9\u5927\u5bb6\u54ac\u4e2a\u6253\u706b\u673a\u5427 #include <bits/stdc++.h> using namespace std ; const double alpha = 0.2928 ; typedef struct NODE { int value ; int size ; NODE * lchild , * rchild ; NODE ( int x ){ this -> value = x ; this -> size = 1 ; this -> lchild = this -> rchild = nullptr ; } NODE (){ this -> value = INT_MAX ; this -> size = 0 ; this -> lchild = this -> rchild = nullptr ; } } NODE , * PNODE ; PNODE root ; inline PNODE newNode ( int x ){ return new NODE ( x ); } inline void deleteNode ( PNODE & T ){ delete T ; T = nullptr ; } inline bool isLeaf ( PNODE T ){ return T -> lchild == nullptr ; } inline void pushup ( PNODE T ){ if ( ! isLeaf ( T )){ T -> value = T -> rchild -> value ; T -> size = T -> lchild -> size + T -> rchild -> size ; } } inline void rotate ( PNODE T , bool d ){ PNODE temp ; if ( ! d ){ temp = T -> rchild ; T -> rchild = T -> lchild ; T -> lchild = T -> rchild -> lchild ; T -> rchild -> lchild = T -> rchild -> rchild ; T -> rchild -> rchild = temp ; } else { temp = T -> lchild ; T -> lchild = T -> rchild ; T -> rchild = T -> lchild -> rchild ; T -> lchild -> rchild = T -> lchild -> lchild ; T -> lchild -> lchild = temp ; } pushup ( T -> lchild ); pushup ( T -> rchild ); pushup ( T ); } inline void maintain ( PNODE T ){ bool d = 0 ; if ( ! isLeaf ( T )){ if ( T -> lchild -> size < T -> size * alpha ) d = 1 ; else if ( T -> rchild -> size < T -> size * alpha ) d = 0 ; else return ; if ( d ){ if ( T -> rchild -> lchild -> size >= T -> rchild -> size * ( 1-2 * alpha ) / ( 1 - alpha )) rotate ( T -> rchild , ! d ); } else { if ( T -> lchild -> rchild -> size >= T -> lchild -> size * ( 1-2 * alpha ) / ( 1 - alpha )) rotate ( T -> lchild , ! d ); } rotate ( T , d ); } } inline void Insert ( PNODE T , int x ){ if ( isLeaf ( T )){ T -> lchild = newNode ( x ); T -> rchild = newNode ( T -> value ); if ( T -> lchild -> value > T -> rchild -> value ) swap ( T -> lchild , T -> rchild ); pushup ( T ); return ; } if ( T -> lchild -> value >= x ) Insert ( T -> lchild , x ); else Insert ( T -> rchild , x ); pushup ( T ); maintain ( T ); } inline void Delete ( PNODE & T , int x ){ if ( isLeaf ( T )) return ; if ( x <= T -> lchild -> value ){ if ( isLeaf ( T -> lchild )){ if ( x != T -> lchild -> value ) return ; deleteNode ( T -> lchild ); PNODE buf = T -> rchild ; * T = * buf ; deleteNode ( buf ); } else Delete ( T -> lchild , x ); } else { if ( isLeaf ( T -> rchild )){ if ( x != T -> rchild -> value ) return ; deleteNode ( T -> rchild ); PNODE buf = T -> lchild ; * T = * buf ; deleteNode ( buf ); } else Delete ( T -> rchild , x ); } pushup ( T ); maintain ( T ); } inline int GetRnk ( PNODE T , int x ){ if ( isLeaf ( T )) return 1 ; if ( x <= T -> lchild -> value ) return GetRnk ( T -> lchild , x ); return T -> lchild -> size + GetRnk ( T -> rchild , x ); } inline int GetNum ( PNODE T , int rnk ){ if ( isLeaf ( T )) return T -> value ; if ( rnk <= T -> lchild -> size ) return GetNum ( T -> lchild , rnk ); return GetNum ( T -> rchild , rnk - T -> lchild -> size ); } inline int GetPre ( PNODE T , int num ){ return GetNum ( T , GetRnk ( T , num ) -1 ); } inline int GetSuf ( PNODE T , int num ){ return GetNum ( T , GetRnk ( T , num + 1 )); } int main (){ root = new NODE ; int n ; cin >> n ; while ( n -- ){ int opt ; cin >> opt ; switch ( opt ){ case 1 :{ int x ; cin >> x ; Insert ( root , x ); break ; } case 2 :{ int x ; cin >> x ; Delete ( root , x ); break ; } case 3 :{ int x ; cin >> x ; cout << GetRnk ( root , x ) << endl ; break ; } case 4 :{ int x ; cin >> x ; cout << GetNum ( root , x ) << endl ; break ; } case 5 :{ int x ; cin >> x ; cout << GetPre ( root , x ) << endl ; break ; } case 6 :{ int x ; cin >> x ; cout << GetSuf ( root , x ) << endl ; break ; } } } return 0 ; } \u8fd9\u662f\u6536\u8d77\u6765\u7684\u6837\u5b50 C++ Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 #define _CRT_SECURE_NO_WARNINGS #include <opencv.hpp> #include <windows.h> #include <conio.h> using namespace std ; using namespace cv ; #define MAX_COL 1024 #define MAX_ROW 2048 //#define MAX_SIZE 6746 char shadowvector [] = \"@$#%&WASGHKBMRDFZXNVCJLQOTPYEUIab987654321~?!^*()<>+-=[]{},. \" ; long long len ; char framemat [ MAX_ROW ][ MAX_COL ]; char gray2char ( int level ) { level = 255 - level ; return shadowvector [( int ) level / 4 ]; } int main () { len = strlen ( shadowvector ) -1 ; HANDLE handle = GetStdHandle ((( DWORD ) -11 )); CONSOLE_FONT_INFOEX cfi ; cfi . cbSize = sizeof ( CONSOLE_FONT_INFOEX ); COORD size ; size . X = 3 ; size . Y = 5 ; cfi . dwFontSize = size ; wcscpy ( cfi . FaceName , L \"Arial\" ); cfi . FontWeight = 100 ; cfi . FontFamily = TMPF_TRUETYPE ; cfi . nFont = 0 ; SetCurrentConsoleFontEx ( handle , TRUE , & cfi ); int T = 6574 + 1 ; _getch (); double c1 = clock (); while ( -- T ) { int t1 = clock (); char strbuf [ 1024 ]; sprintf ( strbuf , \"./frames/%d.png\" , 6574 - T + 1 ); Mat srcImage = imread ( strbuf ); Mat temImage , dstImage1 ; temImage = srcImage ; resize ( temImage , dstImage1 , Size ( 0 , 0 ), ( double ) 1 / 4 + 1 , ( double ) 1 / 8 + 0.5 , INTER_LINEAR ); cvtColor ( dstImage1 , dstImage1 , COLOR_RGB2GRAY ); int cnt = 0 ; for ( int i = 0 , j ; i < dstImage1 . rows ; i ++ ) { for ( j = 0 ; j < dstImage1 . cols ; j ++ ) framemat [ i ][ j ] = gray2char ( dstImage1 . ptr < uchar > ( i )[ j ]); framemat [ i ][ j ] = '\\0' ; } for ( int i = 0 ; i < dstImage1 . rows ; i ++ ) { COORD pos ; pos . X = 0 ; pos . Y = i ; DWORD real ; WriteConsoleOutputCharacter ( handle , framemat [ i ], strlen ( framemat [ i ]) * sizeof ( char ), pos , & real ); } int t2 = clock (); int sl = 33 - t2 + t1 ; Sleep ( sl < 0 ? 0 : sl ); } double c2 = clock (); printf ( \"%.3lf\" , ( c2 - c1 ) / CLOCKS_PER_SEC ); system ( \"pause\" ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import cv2 ascii_char = list ( \"$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1 {} []?-_+~<>i!lI;:, \\\" ^`'. \" ) def get_char ( gray_number ): length = len ( ascii_char ) unit = ( 256.0 + 1 ) / length return ascii_char [ int ( gray_number / unit )] def convert ( source , dest ): image1 = cv2 . imread ( source ) image = cv2 . resize ( image1 ,( 232 , 87 )) gray = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) txt = \"\" for i in range ( image . shape [ 0 ]): for j in range ( image . shape [ 1 ]): txt += get_char ( gray [ i , j ]) txt += ' \\n ' f = open ( dest , 'w' ) f . write ( txt ) if __name__ == '__main__' : for i in range ( 1 , 6574 ): convert ( \" %d .png\" % i , '. \\\\ txt \\\\ %d .txt' % i ); print ( \"Finished Converting %d /6574\" % i , end = ' \\r ' ); \u987a\u4fbf\u6d4b\u8bd5\u4e86\u8f83\u5927\u6587\u4ef6\u4f20\u8f93\uff0c\u8fd8\u6709\u5220\u9664\u7ebf \u4e0b\u9762\u662f\u56fe\u7247 \u00b6 \u6811\u94fe\u5256\u5206\u634f\uff1a AC \u81ea\u52a8\u673a\u634f\uff1a \u987a\u5e26\u4e00\u63d0\uff0c\u4e0a\u8ff0\u56fe\u7247\u5747\u6765\u81ea\u4e8e OI-Wiki","title":"Home"},{"location":"#home","text":"\u6b22\u8fce\u6765\u5230 \\(\\mathcal{LgxTpre}\\) \u7684\u4ee3\u7801\u4ed3\u5e93\u5440\uff01~ \u4e3a\u4e86\u4fdd\u8bc1\u60a8\u7684\u4f7f\u7528\u4f53\u9a8c\uff0c\u4e0b\u9762\u5c06\u4f1a\u5bf9\u4e00\u4e9b\u5185\u5bb9\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8bf7\u67e5\u770b\u5176\u662f\u5426\u6b63\u786e qwq\u3002","title":"Home"},{"location":"#_1","text":"\u884c\u5185\u516c\u5f0f\uff1a \\(f(x)=\\sum_{n=0}^m a_nx^n\\) \u884c\u95f4\u516c\u5f0f\uff1a $$ h(x) = \\sum_{d\\mid x} f(d)g(\\frac xd) = \\sum_{ab=x}f(a)g(b) $$","title":"\u4e0b\u9762\u662f\u6570\u5b66\u516c\u5f0f"},{"location":"#_2","text":"Language Ratings Python 14.83% C 14.73% Java 13.56% C++ 13.29% C# 7.57%","title":"\u4e0b\u9762\u662f\u8868\u683c"},{"location":"#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 // \u6ca1\u5565\u6d3b\u597d\u6574\u4e86\uff0c\u7ed9\u5927\u5bb6\u54ac\u4e2a\u6253\u706b\u673a\u5427 #include <bits/stdc++.h> using namespace std ; const double alpha = 0.2928 ; typedef struct NODE { int value ; int size ; NODE * lchild , * rchild ; NODE ( int x ){ this -> value = x ; this -> size = 1 ; this -> lchild = this -> rchild = nullptr ; } NODE (){ this -> value = INT_MAX ; this -> size = 0 ; this -> lchild = this -> rchild = nullptr ; } } NODE , * PNODE ; PNODE root ; inline PNODE newNode ( int x ){ return new NODE ( x ); } inline void deleteNode ( PNODE & T ){ delete T ; T = nullptr ; } inline bool isLeaf ( PNODE T ){ return T -> lchild == nullptr ; } inline void pushup ( PNODE T ){ if ( ! isLeaf ( T )){ T -> value = T -> rchild -> value ; T -> size = T -> lchild -> size + T -> rchild -> size ; } } inline void rotate ( PNODE T , bool d ){ PNODE temp ; if ( ! d ){ temp = T -> rchild ; T -> rchild = T -> lchild ; T -> lchild = T -> rchild -> lchild ; T -> rchild -> lchild = T -> rchild -> rchild ; T -> rchild -> rchild = temp ; } else { temp = T -> lchild ; T -> lchild = T -> rchild ; T -> rchild = T -> lchild -> rchild ; T -> lchild -> rchild = T -> lchild -> lchild ; T -> lchild -> lchild = temp ; } pushup ( T -> lchild ); pushup ( T -> rchild ); pushup ( T ); } inline void maintain ( PNODE T ){ bool d = 0 ; if ( ! isLeaf ( T )){ if ( T -> lchild -> size < T -> size * alpha ) d = 1 ; else if ( T -> rchild -> size < T -> size * alpha ) d = 0 ; else return ; if ( d ){ if ( T -> rchild -> lchild -> size >= T -> rchild -> size * ( 1-2 * alpha ) / ( 1 - alpha )) rotate ( T -> rchild , ! d ); } else { if ( T -> lchild -> rchild -> size >= T -> lchild -> size * ( 1-2 * alpha ) / ( 1 - alpha )) rotate ( T -> lchild , ! d ); } rotate ( T , d ); } } inline void Insert ( PNODE T , int x ){ if ( isLeaf ( T )){ T -> lchild = newNode ( x ); T -> rchild = newNode ( T -> value ); if ( T -> lchild -> value > T -> rchild -> value ) swap ( T -> lchild , T -> rchild ); pushup ( T ); return ; } if ( T -> lchild -> value >= x ) Insert ( T -> lchild , x ); else Insert ( T -> rchild , x ); pushup ( T ); maintain ( T ); } inline void Delete ( PNODE & T , int x ){ if ( isLeaf ( T )) return ; if ( x <= T -> lchild -> value ){ if ( isLeaf ( T -> lchild )){ if ( x != T -> lchild -> value ) return ; deleteNode ( T -> lchild ); PNODE buf = T -> rchild ; * T = * buf ; deleteNode ( buf ); } else Delete ( T -> lchild , x ); } else { if ( isLeaf ( T -> rchild )){ if ( x != T -> rchild -> value ) return ; deleteNode ( T -> rchild ); PNODE buf = T -> lchild ; * T = * buf ; deleteNode ( buf ); } else Delete ( T -> rchild , x ); } pushup ( T ); maintain ( T ); } inline int GetRnk ( PNODE T , int x ){ if ( isLeaf ( T )) return 1 ; if ( x <= T -> lchild -> value ) return GetRnk ( T -> lchild , x ); return T -> lchild -> size + GetRnk ( T -> rchild , x ); } inline int GetNum ( PNODE T , int rnk ){ if ( isLeaf ( T )) return T -> value ; if ( rnk <= T -> lchild -> size ) return GetNum ( T -> lchild , rnk ); return GetNum ( T -> rchild , rnk - T -> lchild -> size ); } inline int GetPre ( PNODE T , int num ){ return GetNum ( T , GetRnk ( T , num ) -1 ); } inline int GetSuf ( PNODE T , int num ){ return GetNum ( T , GetRnk ( T , num + 1 )); } int main (){ root = new NODE ; int n ; cin >> n ; while ( n -- ){ int opt ; cin >> opt ; switch ( opt ){ case 1 :{ int x ; cin >> x ; Insert ( root , x ); break ; } case 2 :{ int x ; cin >> x ; Delete ( root , x ); break ; } case 3 :{ int x ; cin >> x ; cout << GetRnk ( root , x ) << endl ; break ; } case 4 :{ int x ; cin >> x ; cout << GetNum ( root , x ) << endl ; break ; } case 5 :{ int x ; cin >> x ; cout << GetPre ( root , x ) << endl ; break ; } case 6 :{ int x ; cin >> x ; cout << GetSuf ( root , x ) << endl ; break ; } } } return 0 ; } \u8fd9\u662f\u6536\u8d77\u6765\u7684\u6837\u5b50 C++ Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 #define _CRT_SECURE_NO_WARNINGS #include <opencv.hpp> #include <windows.h> #include <conio.h> using namespace std ; using namespace cv ; #define MAX_COL 1024 #define MAX_ROW 2048 //#define MAX_SIZE 6746 char shadowvector [] = \"@$#%&WASGHKBMRDFZXNVCJLQOTPYEUIab987654321~?!^*()<>+-=[]{},. \" ; long long len ; char framemat [ MAX_ROW ][ MAX_COL ]; char gray2char ( int level ) { level = 255 - level ; return shadowvector [( int ) level / 4 ]; } int main () { len = strlen ( shadowvector ) -1 ; HANDLE handle = GetStdHandle ((( DWORD ) -11 )); CONSOLE_FONT_INFOEX cfi ; cfi . cbSize = sizeof ( CONSOLE_FONT_INFOEX ); COORD size ; size . X = 3 ; size . Y = 5 ; cfi . dwFontSize = size ; wcscpy ( cfi . FaceName , L \"Arial\" ); cfi . FontWeight = 100 ; cfi . FontFamily = TMPF_TRUETYPE ; cfi . nFont = 0 ; SetCurrentConsoleFontEx ( handle , TRUE , & cfi ); int T = 6574 + 1 ; _getch (); double c1 = clock (); while ( -- T ) { int t1 = clock (); char strbuf [ 1024 ]; sprintf ( strbuf , \"./frames/%d.png\" , 6574 - T + 1 ); Mat srcImage = imread ( strbuf ); Mat temImage , dstImage1 ; temImage = srcImage ; resize ( temImage , dstImage1 , Size ( 0 , 0 ), ( double ) 1 / 4 + 1 , ( double ) 1 / 8 + 0.5 , INTER_LINEAR ); cvtColor ( dstImage1 , dstImage1 , COLOR_RGB2GRAY ); int cnt = 0 ; for ( int i = 0 , j ; i < dstImage1 . rows ; i ++ ) { for ( j = 0 ; j < dstImage1 . cols ; j ++ ) framemat [ i ][ j ] = gray2char ( dstImage1 . ptr < uchar > ( i )[ j ]); framemat [ i ][ j ] = '\\0' ; } for ( int i = 0 ; i < dstImage1 . rows ; i ++ ) { COORD pos ; pos . X = 0 ; pos . Y = i ; DWORD real ; WriteConsoleOutputCharacter ( handle , framemat [ i ], strlen ( framemat [ i ]) * sizeof ( char ), pos , & real ); } int t2 = clock (); int sl = 33 - t2 + t1 ; Sleep ( sl < 0 ? 0 : sl ); } double c2 = clock (); printf ( \"%.3lf\" , ( c2 - c1 ) / CLOCKS_PER_SEC ); system ( \"pause\" ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import cv2 ascii_char = list ( \"$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1 {} []?-_+~<>i!lI;:, \\\" ^`'. \" ) def get_char ( gray_number ): length = len ( ascii_char ) unit = ( 256.0 + 1 ) / length return ascii_char [ int ( gray_number / unit )] def convert ( source , dest ): image1 = cv2 . imread ( source ) image = cv2 . resize ( image1 ,( 232 , 87 )) gray = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) txt = \"\" for i in range ( image . shape [ 0 ]): for j in range ( image . shape [ 1 ]): txt += get_char ( gray [ i , j ]) txt += ' \\n ' f = open ( dest , 'w' ) f . write ( txt ) if __name__ == '__main__' : for i in range ( 1 , 6574 ): convert ( \" %d .png\" % i , '. \\\\ txt \\\\ %d .txt' % i ); print ( \"Finished Converting %d /6574\" % i , end = ' \\r ' ); \u987a\u4fbf\u6d4b\u8bd5\u4e86\u8f83\u5927\u6587\u4ef6\u4f20\u8f93\uff0c\u8fd8\u6709\u5220\u9664\u7ebf","title":"\u4e0b\u9762\u662f\u4ee3\u7801\u6bb5"},{"location":"#_4","text":"\u6811\u94fe\u5256\u5206\u634f\uff1a AC \u81ea\u52a8\u673a\u634f\uff1a \u987a\u5e26\u4e00\u63d0\uff0c\u4e0a\u8ff0\u56fe\u7247\u5747\u6765\u81ea\u4e8e OI-Wiki","title":"\u4e0b\u9762\u662f\u56fe\u7247"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/WBLT/","text":"\\(\\text{Weight Balanced Leafy Tree}\\) \u5b66\u4e60\u7b14\u8bb0\uff1a \u00b6 \u524d\u8a00\uff1a \u00b6 \u5728\u8fd9\u91cc\u5341\u5206\u5341\u5206\u611f\u8c22 \\(\\text{lxl}\\) \u548c\u738b\u601d\u9f50\u53d1\u660e\u548c\u603b\u7ed3\u4e86 \\(\\text{WBLT}\\) \u3002 \u56e0\u4e3a\u7f51\u4e0a\u5173\u4e8e \\(\\text{WBLT}\\) \u7684\u6b63\u786e\u8bb2\u89e3\uff08\u5df2\u9664\u53bb\u90a3\u7bc7\u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587\uff0c\u4e0d\u8fc7\u4f2a\u4ee3\u7801\u548c\u56fe\u7247\u90e8\u5206\u7684\u5c0f\u7ec6\u8282\u9519\u8bef\u8fd8\u662f\u4e0d\u5c11\u7684\uff09\u975e\u5e38\u7684\u5c11\uff08\u5305\u62ec OI-Wiki \u4e0a\u7684 \\(\\text{Leafy Tree}\\) \u548c \\(\\text{WBLT}\\) \u7684\u4e13\u9898\u5199\u7684\u4e5f\u5168\u662f\u5047\u7684\u3002\u53cd\u6b63\u57fa\u672c\u4e0a\u53ea\u8981\u7528\u5355\u65cb\u7684\u5168\u662f\u5047\u7684\uff0c\u4e0d\u670d\u7684\u53ef\u4ee5\u628a\u4ee3\u7801\u7ed9\u6211\uff0c\u6211\u6559\u4f60\u5361\uff09\uff0c\u6240\u4ee5\u5199\u4e0b\u4e86\u672c\u7bc7\u7b14\u8bb0\u6765\u548c\u5927\u5bb6\u4e00\u8d77\u4ea4\u6d41\u3002 \u56e0\u4e3a\u672c\u4eba\u5c1a\u83dc\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u638c\u63e1 \\(\\text{WBLT}\\) \uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5e76\u6ca1\u6709\u505a\u5b8c\u90a3\u51e0\u9053\u7ecf\u5178\u7684 \\(\\text{WBLT}\\) \u9898\u76ee\uff09\uff0c\u4e0d\u8fc7\u540e\u9762\u4f1a\u6162\u6162\u66f4\u65b0\u3002 \u5982\u82e5\u60f3\u8981\u6109\u5feb\u7684\u770b\u5b8c\u672c\u7bc7\u7b14\u8bb0\uff0c\u5efa\u8bae\u5b66\u4e60\u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9\u7684\u601d\u60f3\uff08\u5e94\u8be5\u7b97 \\(\\text{trick}\\) \u5427\uff09\u3002 \u524d\u7f6e\u77e5\u8bc6\uff1a \u00b6 \u4e00\u3001 \\(\\text{Leafy Tree}\\) \uff1a \u00b6 \u5176\u5b9e \\(\\text{Leafy Tree}\\) \u662f\u4e00\u7c7b\u6811\uff0c\u5b83\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u539f\u59cb\u6570\u636e\u653e\u5728\u53f6\u8282\u70b9\u4e2d\uff0c\u800c\u975e\u53f6\u5b50\u8282\u70b9\u7ef4\u62a4\u533a\u95f4\u5185\u7684\u4fe1\u606f\u3002 \u542c\u5b8c\u6838\u5fc3\u601d\u60f3\uff0c\u6211\u60f3\u5927\u5bb6\u4e00\u5b9a\u60f3\u5230\u4e86\u4e00\u4e2a\u6211\u4eec\u559c\u95fb\u4e50\u89c1\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014\u7ebf\u6bb5\u6811\u3002\u6ca1\u9519\uff0c\u7ebf\u6bb5\u6811\u672c\u8d28\u4e0a\u4e5f\u5c5e\u4e8e \\(\\text{Leafy Tree}\\) \uff0c\u5176\u7279\u5f81\u975e\u5e38\u660e\u663e\uff0c\u53f6\u5b50\u7ed3\u70b9\u7ef4\u62a4\u7684\u662f\u539f\u59cb\u4fe1\u606f\uff0c\u800c\u975e\u53f6\u5b50\u8282\u70b9\u4f60\u60f3\u8981\u7ef4\u62a4\u7684\u533a\u95f4\u4fe1\u606f\u3002 \u5176\u5b9e\uff0c\u6211\u8ba4\u4e3a\u57fa\u4e8e \\(\\text{Leafy Tree}\\) \u7684 \\(\\text{BST}\\) \u5b9e\u73b0\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u7ef4\u62a4 \u533a\u95f4\u6700\u5927\u503c \u7684\u7ebf\u6bb5\u6811\uff0c\u5b83\u8d4b\u4e88\u4e86\u7ebf\u6bb5\u6811 \\(\\text{BST}\\) \u7684\u6027\u8d28\uff0c\u52a0\u4ee5\u53bb\u9664\u90e8\u5206\u7684\u65e0\u7528\u8282\u70b9\uff0c\u5f62\u6210\u4e00\u68f5\u5341\u5206\u81ea\u7531\u7684\u7ebf\u6bb5\u6811\u3002 \u5982\u679c\u5404\u4f4d\u5bf9\u7ebf\u6bb5\u6811\u5341\u5206\u719f\u6089\uff08\u5c24\u5176\u662f\u52a8\u6001\u5f00\u70b9\uff09\uff0c\u4e0b\u9762\u5185\u5bb9\u5c06\u4f1a\u7ed9\u4f60\u4e00\u79cd\u5341\u5206\u719f\u6089\u7684\u611f\u89c9\u3002 \u4e0b\u9762\u5c06\u8bf4\u57fa\u4e8e \\(\\text{Leafy Tree}\\) \u7684 \\(\\text{BST}\\) \u5b9e\u73b0\u3002 \u4e8c\u3001\u57fa\u4e8e \\(\\text{Leafy Tree}\\) \u7684 \\(\\text{BST}\\) \u5b9e\u73b0\uff1a \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5148\u68b3\u7406\u4e00\u4e0b \\(\\text{BST}\\) \u548c \\(\\text{Leafy Tree}\\) \u7684\u6027\u8d28\uff1a \\(\\text{BST}\\) \uff1a \u5bf9\u4e8e\u4efb\u610f\u4e00\u68f5 \\(\\text{BST}\\) \u6765\u8bf4\uff0c\u5176\u6839\u8282\u70b9\u7684\u5de6\u513f\u5b50\u4e00\u5b9a\u4e0d\u5927\u4e8e\u6839\u8282\u70b9\uff0c\u6839\u8282\u7684\u53f3\u513f\u5b50\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u6839\u8282\u70b9\u3002 \u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5176\u82e5\u5c0f\u4e8e\u7b49\u4e8e\u6839\u8282\u70b9\uff0c\u5219\u5411\u5de6\u8d70\uff0c\u5176\u82e5\u5927\u4e8e\u6839\u8282\u70b9\uff0c\u5219\u5411\u53f3\u8d70\u3002 \\(\\text{Leafy Tree}\\) \uff1a \u5bf9\u4e8e\u4efb\u610f\u4e00\u68f5 \\(\\text{Leafy Tree}\\) \u6765\u8bf4\uff0c\u5176\u53f6\u5b50\u7ed3\u70b9\u4e00\u5b9a\u662f\u7ef4\u62a4\u7684\u539f\u59cb\u6570\u636e\uff0c\u5176\u975e\u53f6\u5b50\u8282\u70b9\u4e00\u5b9a\u662f\u7ef4\u62a4\u7684\u533a\u95f4\u4fe1\u606f\u3002 \u65e0\u8bba\u4f55\u65f6\uff0c \\(\\text{Leafy Tree}\\) \u7684\u4e00\u4e2a\u8282\u70b9\u8981\u4e48\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u8981\u4e48\u6ca1\u6709\u513f\u5b50\u3002 \u6b64\u65f6\uff0c\u6839\u636e \\(\\text{Leafy Tree}\\) \u7684\u6027\u8d28 \\(1\\) \uff0c\u6211\u4eec\u5c06\u6240\u6709\u7684\u539f\u59cb\u6570\u636e\u8282\u70b9\u90fd\u653e\u5728\u53f6\u5b50\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u6bcf\u4e24\u4e2a\u8282\u70b9\u4e0a\u65b9\u52a0\u4e00\u4e2a\u4ed6\u4eec\u7684\u7236\u4eb2\uff0c\u7ef4\u62a4\u7684\u662f\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u5927\u503c\uff08\u6ce8\u610f\uff0c\u6b64\u65f6\u7684\u4e24\u4e2a\u8282\u70b9\u4e0d\u4e00\u5b9a\u662f\u4e24\u4e2a\u539f\u59cb\u6570\u636e\u8282\u70b9\uff09\u3002 \u6839\u636e \\(\\text{BST}\\) \u7684\u6027\u8d28 \\(1\\) \u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u7ed3\u8bba \\(1\\) \uff1a \u5de6\u513f\u5b50\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u3002 \u6839\u636e\u8fd9\u4e00\u7ed3\u8bba\uff0c\u6211\u4eec\u89c4\u5b9a \\(\\text{Leafy Tree}\\) \u4e0a\u7684\u6bcf\u4e00\u4e2a\u5de6\u513f\u5b50\u8981\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u3002 \u7136\u540e\u4e00\u68f5\u57fa\u4e8e \\(\\text{Leafy Tree}\\) \u7684 \\(\\text{BST}\\) \u96cf\u5f62\u5c31\u51fa\u6765\u4e86\uff0c\u6211\u4eec\u518d\u6765\u68b3\u7406\u4e00\u4e0b\uff1a \u4efb\u4f55\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7ef4\u62a4\u7684\u90fd\u662f\u5176\u6240\u4ee3\u8868\u7684\u533a\u95f4\u7684\u6700\u5927\u503c\u3002 \u4efb\u4f55\u4e00\u4e2a\u5de6\u513f\u5b50\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u3002 \u771f\u5b9e\u7684\u6570\u636e\u90fd\u5904\u4e8e\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u6839\u636e\u4e0a\u8ff0\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u67e5\u627e\u4e86\uff0c\u601d\u8def\u5982\u4e0b\uff1a \u5982\u679c\u5f53\u524d\u8981\u67e5\u627e\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u503c\uff0c\u5219\u53bb\u5de6\u513f\u5b50\u4e2d\u627e\uff0c\u5426\u5219\u53bb\u53f3\u513f\u5b50\u627e\u3002 \u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u5224\u65ad\u662f\u5426\u76f8\u7b49\uff0c\u82e5\u4e0d\u76f8\u7b49\uff0c\u5219\u8bf4\u660e\u6ca1\u6709\u67e5\u627e\u503c\uff0c\u5426\u5219\u627e\u5230\u67e5\u627e\u503c\u3002 Code\uff1a 1 2 3 4 5 6 7 bool Find ( PNODE T , int x ){ if ( isLeaf ( T )) return T -> value == x ; if ( x <= T -> lchild -> value ) return Find ( T -> lchild , x ); return Find ( T -> rchild , x ); } \u73b0\u5728\uff0c\u6211\u4eec\u6765\u601d\u8003\u63d2\u5165\uff1a \u82e5\u6211\u4eec\u6709\u4e00\u4e2a\u5f85\u63d2\u5165\u7684\u65b0\u8282\u70b9 \\(x\\) \uff0c\u5219\u6839\u636e \\(\\text{Leafy Tree}\\) \u7684\u6027\u8d28 \\(1\\) \uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u51fa\u8fd9\u4e2a\u65b0\u8282\u70b9\u4e00\u5b9a\u662f\u5728\u53f6\u5b50\u4e0a\u7684\u3002\u7efc\u5408\u4e00\u4e0b\uff0c\u5c31\u4e0d\u96be\u5f97\u51fa\u63d2\u5165\u7684\u601d\u8def\uff1a \u5982\u679c\u5f53\u524d\u5f85\u63d2\u5165\u65b0\u8282\u70b9 \\(x\\) \u7684\u503c\u662f\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u5de6\u513f\u5b50\u7684\u503c\uff0c\u5219\u8fdb\u5165\u5f53\u524d\u8282\u70b9\u5de6\u513f\u5b50\uff0c\u5426\u5219\u8fdb\u5165\u5f53\u524d\u8282\u70b9\u53f3\u513f\u5b50\uff0c\u7136\u540e\u66f4\u65b0\u5f53\u524d\u8282\u70b9\uff08\u6ce8\u610f\uff0c\u4e00\u5b9a\u8981\u66f4\u65b0\u5f53\u524d\u8282\u70b9\uff09\u3002 \u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a \u5efa\u7acb\u4e24\u4e2a\u65b0\u8282\u70b9\uff0c\u4e00\u4e2a\u7684\u503c\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u7684\u503c\u7b49\u4e8e\u65b0\u8282\u70b9\u7684\u503c\u3002 \u6bd4\u8f83\u4e24\u4e2a\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u5c06\u503c\u8f83\u5927\u7684\u8282\u70b9\u8bbe\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u8f83\u5c0f\u7684\u8bbe\u4e3a\u5de6\u513f\u5b50\uff08\u4f9d\u636e\u6027\u8d28 \\(2\\) \uff09\u3002 \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u3002 Code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void Insert ( PNODE T , int x ){ if ( isLeaf ( T )){ T -> lchild = newNode ( x ); T -> rchild = newNode ( x ); if ( T -> lchild > T -> rchild ) swap ( T -> lchild , T -> rchild ); T -> value = T -> rchild -> value ; pushup ( T ); return ; } if ( x <= T -> lchild -> value ) Insert ( T -> lchild , x ); else Insert ( T -> rchild , x ); pushup ( T ); } \u90a3\u4e48\u81f3\u4e8e\u5220\u9664\u64cd\u4f5c\uff0c\u5219\u66f4\u52a0\u7684\u66b4\u529b\uff1a \u82e5\u5f53\u524d\u8282\u70b9\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u76f4\u63a5\u9000\u51fa\uff08\u56e0\u4e3a\u6b64\u65f6\u6211\u4eec\u7684\u6811\u4e3a\u7a7a\uff09\u3002 \u82e5\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f85\u5220\u9664\u7684\u8282\u70b9\u7684\u503c\uff0c\u5219\u8fdb\u884c\u4e0b\u5217\u64cd\u4f5c\uff1a \u82e5\u5de6\u513f\u5b50\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u82e5\u5de6\u513f\u5b50\u7684\u503c\u4e0e\u5f85\u5220\u9664\u8282\u70b9\u76f8\u540c\uff0c\u8fdb\u884c\u4e0b\u8ff0\u64cd\u4f5c\uff1a \u5220\u9664\u5de6\u513f\u5b50\u3002 \u5c06\u53f3\u513f\u5b50\u7684\u503c\u8d4b\u7ed9\u5f53\u524d\u8282\u70b9\u3002 \u5220\u9664\u53f3\u513f\u5b50\u3002 \u5426\u5219\uff0c\u5c31\u8d70\u8fdb\u5de6\u513f\u5b50\u3002 \u5426\u5219\uff0c\u5bf9\u53f3\u513f\u5b50\u8fdb\u884c\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002 Code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 void Delete ( PNODE T , int x ){ if ( isLeaf ( T )) return ; if ( x <= T -> lchild -> value ){ if ( isLead ( T -> lchild )){ if ( T -> lchild -> value != x ) return ; deleteNode ( T -> lchild ); PNODE buf = T -> rchild ; * T = * buf ; deleteNode ( buf ); } else Delete ( T -> lchild , x ); } else { if ( isLeaf ( T -> rchild )){ if ( T -> rchild -> value != x ) return ; deleteNode ( T -> rchild ); PNODE buf = T -> lchild ; * T = * buf ; deleteNode ( buf ); } else Delete ( T -> rchild , x ); } pushup ( T ); } \u4e09\u3001 \\(\\text{Weight Balanced Leafy Tree}\\) \uff1a \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5f15\u5165\u6982\u5ff5 \\(\\text{Weight Balanced Tree}\\) \uff08\u6743\u5e73\u8861\u6811\uff0c\u53c8\u540d \\(\\text{BB}\\;[\\alpha]\\) \u6811\uff09\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u4f9d\u7167\u6b63\u5e38\u7684\u65b9\u6cd5\u63d2\u5165\u5220\u9664\u8282\u70b9\uff0c\u7136\u540e\u5982\u679c\u5de6\u53f3\u5b50\u6811\u6bd4\u4f8b\u4e0d\u6ee1\u8db3\u5e73\u8861\u7cfb\u6570 \\(\\alpha\\) \u7684\u8bdd\uff0c\u5219\u7ef4\u62a4\u5e73\u8861\u3002 \u542c\u5230\u8fd9\u4e00\u70b9\uff0c\u5927\u5bb6\u80af\u5b9a\u60f3\u5230\u4e86\u77e5\u540d\u7684\u66ff\u7f6a\u7f8a\u6811\u3002\u786e\u5b9e\uff0c\u66ff\u7f6a\u7f8a\u6811\u5c5e\u4e8e \\(\\text{Weight Balanced Tree}\\) \u7684\u4e00\u79cd\uff0c\u5176\u7ef4\u62a4\u65b9\u5f0f\u66b4\u529b\u91cd\u6784\u4e5f\u662f \\(\\text{Weight Balanced Tree}\\) \u7684\u4e00\u4e2a\u7ef4\u62a4\u5e73\u8861\u7684\u65b9\u5f0f\u4e4b\u4e00\u3002 \u7136\u800c \\(\\text{Weight Balanced Tree}\\) \u53ea\u80fd\u66b4\u529b\u91cd\u6784\u7ef4\u62a4\u5e73\u8861\u5417\uff1f\u663e\u7136\u4e0d\u662f\uff0c\u9664\u4e86\u91cd\u6784\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u50cf \\(\\text{AVL}\\) \u6811\u4e00\u6837\u65cb\u8f6c\u6765\u7ef4\u62a4\u5e73\u8861\uff0c\u800c \\(\\text{Weight Balanced Leafy Tree}\\) \u7ef4\u62a4\u5e73\u8861\u7684\u65b9\u5f0f\u5c31\u662f\u65cb\u8f6c\u3002 \\(\\text{Weight Balanced Leafy Tree}\\) \u7684\u65cb\u8f6c\u5206\u4e3a\u5355\u65cb\u548c\u53cc\u65cb\uff1a \u5355\u65cb\u957f\u8fd9\u6837\uff1a \u800c\u53cc\u65cb\u5219\u662f\u8fd9\u6837\u7684\uff1a \u6ce8\u610f\uff1a\u518d\u6b21\u5f3a\u8c03\uff0c\u4e00\u5b9a\u8981\u6709\u53cc\u65cb\uff0c\u4e0d\u7136\u5e73\u8861\u6027\u662f\u5047\u7684 \u7136\u540e\u6e90\u4ee3\u7801\u548c\u4e0d\u5e73\u8861\u7684 \\(\\text{Leafy Tree}\\) \u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u7ed9\u6bcf\u4e2a\u8282\u70b9\u52a0\u4e0a\u5c5e\u6027 \\(size\\) \uff0c\u7136\u540e\u6bcf\u6b21\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u7ef4\u62a4\u4e00\u4e0b\u6811\u7684\u5e73\u8861\u5e76\u4e14\u4e0a\u4f20\u7684\u65f6\u5019\u522b\u5fd8\u4e86 \\(size\\) \u7684\u4fe1\u606f\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\u3002 Code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void rotate ( PNODE T , bool d ){ PNODE temp ; if ( ! d ){ temp = T -> rchild ; T -> rchild = T -> lchild ; T -> lchild = T -> rchild -> lchild ; T -> rchild -> lchild = T -> rchild -> rchild ; T -> rchild -> rchild = temp ; } else { temp = T -> lchild ; T -> lchild = T -> rchild ; T -> rchild = T -> lchild -> rchild ; T -> lchild -> rchild = T -> lchild -> lchild ; T -> lchild -> lchild = temp ; } pushup ( T -> lchild ); pushup ( T -> rchild ); pushup ( T ); //\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e00\u5b9a\u8981\u5148 pushup \u513f\u5b50\uff0c\u518d pushup \u7236\u4eb2 } \u65e2\u7136\u5df2\u7ecf\u4ecb\u7ecd\u5b8c\u4e86\u7ef4\u62a4\u5e73\u8861\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u5f53\u5728\u4ec0\u4e48\u65f6\u5019\u7ef4\u62a4\u5e73\u8861\u5462\uff1f \u9996\u5148\uff0c\u6211\u4eec\u8bbe\u4e00\u4e2a\u8282\u70b9\u7684\u5e73\u8861\u5ea6\u4e3a \\(\\rho\\) \uff0c \\(\\rho\\) \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \\[\\rho_x=\\dfrac{weight_{x.left}}{weight_x}\\] \u5176\u4e2d\u7684 \\(weight_x\\) \u8868\u793a\u5b50\u6811 \\(x\\) \u6240\u5305\u542b\u7684\u53f6\u8282\u70b9\u6570\u91cf\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u8ba4\u4e3a\u4e00\u4e2a\u8282\u70b9\u662f\u5e73\u8861\u7684\u5f53\u4e14\u4ec5\u5f53 \\(\\rho\\) \u6ee1\u8db3 \\(\\rho \\ge \\alpha\\) \u4e14 \\(1-\\rho \\ge \\alpha\\) \uff0c\u82e5\u5f53\u524d\u8282\u70b9\u4e0d\u5e73\u8861\uff0c\u5219\u82e5 \\(\\rho_{son} \\ge \\dfrac {1-2\\alpha}{1-\\alpha}\\) \uff0c\u5219\u8fdb\u884c\u53cc\u65cb\uff0c\u5426\u5219\u8fdb\u884c\u5355\u65cb\u3002 \u90a3\u4e48\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4f9d\u7167\u8fd9\u4e2a\u539f\u5219\u6765\u7ef4\u62a4\u5462\uff1f\u6211\u4eec\u6765\u5c1d\u8bd5\u8bc1\u660e\u4e00\u4e0b\uff1a \u6211\u4eec\u6839\u636e\u5355\u65cb\u7684\u56fe\u793a\uff0c\u8bbe \\(\\rho_x\\) \u4e3a\u8282\u70b9 \\(X\\) \u7684\u5e73\u8861\u5ea6\uff0c \\(\\rho_y\\) \u8868\u793a\u8282\u70b9 \\(Y\\) \u7684\u5e73\u8861\u5ea6\uff0c \\(\\gamma_y\\) \u4e3a \u5355\u65cb\u540e\u8282\u70b9 \\(\\boldsymbol{Y}\\) \u7684\u5e73\u8861\u5ea6\u3002 \u6839\u636e\u56fe\u793a\u548c\u5df2\u77e5\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\uff1a \\[0 < \\rho_x < \\alpha\\] \\[\\alpha \\le \\rho_y \\le 1-\\alpha\\] \u6839\u636e\u56fe\u793a\u548c\u5355\u65cb\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u4e0d\u96be\u770b\u51fa \\(\\rho_x\\) \u3001 \\(\\rho_y\\) \u3001 \\(\\gamma_y\\) \u5177\u6709\u4ee5\u4e0b\u5173\u7cfb\uff1a \\[\\gamma_y = \\rho_x + \\rho_y - \\rho_x\\rho_y\\] \u6211\u4eec\u5df2\u77e5 \\(\\rho_x\\) \u548c \\(\\gamma_y\\) \u5c31\u662f\u5f53\u524d\u5b50\u6811\u65cb\u8f6c\u524d\u548c\u65cb\u8f6c\u540e\u7684\u5e73\u8861\u5ea6\uff0c\u800c\u6211\u4eec\u65cb\u8f6c\u540e\u5b50\u6811\u60f3\u8981\u8fbe\u5230\u5e73\u8861\uff0c\u5219\u9700\u8981\uff1a \\[\\alpha \\le \\gamma_y \\le 1-\\alpha\\] \u6211\u4eec\u6b64\u65f6\u53ef\u4ee5\u5c06\u76ee\u6807\u62c6\u6210\u4e24\u90e8\u5206\uff0c\u5206\u522b\u662f\uff1a \\[ \\begin{cases} \\gamma_y \\ge \\alpha \\\\ \\gamma_y \\le 1 - \\alpha \\end{cases} \\] \u6b64\u65f6\uff0c\u5c06 \\(\\rho_x\\) \u3001 \\(\\rho_y\\) \u3001 \\(\\gamma_y\\) \u7684\u5173\u7cfb\u4ee3\u5165\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u6613\u5f97\uff1a \\[ \\begin{cases} \\rho_x + \\rho_y - \\rho_x\\rho_y \\ge \\alpha \\\\ \\rho_x + \\rho_y - \\rho_x\\rho_y \\le 1 - \\alpha \\end{cases} \\] \u5c06\u5f0f\u5b50\u7a0d\u5fae\u53d8\u5f62\uff0c\u5373\u5f97\uff1a \\[ \\begin{cases} \\rho_y \\ge \\dfrac {\\alpha - \\rho_x}{1-\\rho_x} \\\\\\\\ \\rho_y \\le \\dfrac {1 - \\alpha- \\rho_x}{1-\\rho_x} \\end{cases} \\] \u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e0b\u5217\u4e24\u4e2a\u547d\u9898\uff1a \\[1.\\;\\forall \\rho_y \\in [\\alpha, 1-\\alpha]\\;,\\; \\rho_x \\in [0, \\alpha ]\\qquad \\rho_y \\ge \\dfrac {\\alpha - \\rho_x}{1-\\rho_x}\\] \\[2.\\;\\forall \\rho_y \\in [\\alpha, 1-\\alpha]\\;,\\; \\rho_x \\in [0, \\alpha ]\\qquad \\rho_y \\le \\dfrac {1- \\alpha - \\rho_x}{1-\\rho_x}\\] \u6211\u4eec\u6b64\u65f6\u7684\u95ee\u9898\u4e5f\u53d8\u6210\u4e86\u8bc1\u660e\u4e0a\u8ff0\u4e24\u4e2a\u547d\u9898\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u540c\u65f6\u6210\u7acb\u3002 \u547d\u9898 \\(1\\) \u5728\u5df2\u77e5\u6761\u4ef6\u4e0b\u662f\u663e\u7136\u6210\u7acb\u7684\uff0c\u56e0\u4e3a\u539f\u547d\u9898\u7b49\u4e8e\uff1a \\[\\forall \\rho_y \\in [\\alpha, 1-\\alpha]\\;,\\; \\rho_x \\in [0, \\alpha ]\\qquad \\rho_y \\ge (\\dfrac {\\alpha - \\rho_x}{1-\\rho_x})_{\\max}\\] \u6839\u636e\u7cd6\u6c34\u4e0d\u7b49\u5f0f\uff0c\u6613\u5f97\uff1a \\[(\\dfrac {\\alpha - \\rho_x}{1-\\rho_x})_{\\max} = \\alpha\\] \u6545\u6b64\u65f6\uff0c\u547d\u9898 \\(1\\) \u663e\u7136\u6210\u7acb\u3002 \u90a3\u4e48\uff0c\u5173\u4e8e\u547d\u9898 \\(2\\) \uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6709\u76f8\u4f3c\u7684\u8bc1\u660e\u8fc7\u7a0b\uff1a \\[\\forall \\rho_y \\in [\\alpha, 1-\\alpha]\\;,\\; \\rho_x \\in [0, \\alpha ]\\qquad \\rho_y \\le (\\dfrac {1 - \\alpha - \\rho_x}{1-\\rho_x})_{\\min}\\] \u6839\u636e\u7cd6\u6c34\u4e0d\u7b49\u5f0f\uff0c\u6613\u5f97\uff1a \\[ \\begin{array}{ll} (\\dfrac {1 - \\alpha - \\rho_x}{1 -\\rho_x})_{\\min} &= \\dfrac{1-\\alpha-\\alpha}{1-\\alpha}\\\\\\\\ &=\\dfrac{1-2\\alpha}{1-\\alpha} \\end{array} \\] \u4ee3\u5165\u539f\u5f0f\uff0c\u5219\u5f97\u5230\uff1a \\[\\forall \\rho_y \\in [\\alpha, 1-\\alpha]\\qquad \\rho_y \\le \\dfrac{1-2\\alpha}{1-\\alpha}\\] \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53 \\(\\rho_y \\in (\\dfrac{1-2\\alpha}{1-\\alpha},1-\\alpha]\\) \u7684\u65f6\u5019\uff0c\u547d\u9898\u4e8c\u4e0d\u6210\u7acb\uff0c\u6545\u6211\u4eec\u9700\u8981\u5bf9 \\(\\rho_y\\) \u7684\u8303\u56f4\u8fdb\u884c\u6536\u7f29\u5230 \\(\\rho_y \\in [\\alpha, \\dfrac{1-2\\alpha}{1-\\alpha}]\\) \u4e0a\u8ff0\u4e24\u4e2a\u547d\u9898\u624d\u540c\u65f6\u6210\u7acb\u3002 \u7efc\u4e0a\uff0c\u82e5\u5355\u65cb\u80fd\u7ef4\u6301\u5e73\u8861\u6027\uff0c\u5219\u9700\u8981 \\(\\rho_y \\le \\dfrac{1-2\\alpha}{1-\\alpha}\\) \uff0c\u5426\u5219\u5219\u5fc5\u987b\u8fdb\u884c\u53cc\u65cb\u3002 \u8bc1\u6bd5\u3002 \u6240\u4ee5\u6b64\u65f6\u7684\u7ef4\u62a4\u5e94\u5f53\u8fd9\u4e48\u5199\uff1a \u82e5\u5f53\u524d\u8282\u70b9 \u5de6\u513f\u5b50\u7684\u5927\u5c0f \u4e0e \u5f53\u524d\u8282\u70b9\u7684\u5927\u5c0f \u7684\u6bd4\u503c\u5c0f\u4e8e \\(\\alpha\\) \uff0c\u5219\uff1a \u82e5\u5f53\u524d \u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u7684\u5927\u5c0f \u4e0e \u5f53\u524d\u53f3\u513f\u5b50\u7684\u5927\u5c0f \u7684\u6bd4\u503c\u5927\u4e8e\u7b49\u4e8e \\(\\dfrac{1-2\\alpha}{1-\\alpha}\\) \uff0c\u5219\u8fdb\u884c\u53cc\u65cb\u3002 \u5426\u5219\u8fdb\u884c\u5355\u65cb\u3002 \u5426\u5219\u82e5\u5f53\u524d\u8282\u70b9 \u53f3\u513f\u5b50\u7684\u5927\u5c0f \u4e0e \u5f53\u524d\u8282\u70b9\u7684\u5927\u5c0f \u7684\u6bd4\u503c\u5c0f\u4e8e \\(\\alpha\\) \uff0c\u5219\uff1a \u82e5\u5f53\u524d \u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\u7684\u5927\u5c0f \u4e0e \u5f53\u524d\u5de6\u513f\u5b50\u7684\u5927\u5c0f \u7684\u6bd4\u503c\u5927\u4e8e\u7b49\u4e8e \\(\\dfrac{1-2\\alpha}{1-\\alpha}\\) \uff0c\u5219\u8fdb\u884c\u53cc\u65cb\u3002 \u5426\u5219\u8fdb\u884c\u5355\u65cb\u3002 Code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void maintain ( PNODE T ){ if ( ! isLeaf ( T )){ if ( T -> lchild -> size < T -> size * alpha ) d = 1 ; else if ( T -> rchild -> size < T -> size * alpha ) d = 0 ; else return ; if ( d ){ if ( T -> rchild -> lchild -> size >= T -> rchild -> size * ( 1-2 * alpha ) / ( 1 - alpha )) rotate ( T -> rchild , ! d ); } else if ( T -> lchild -> rchild -> size >= T -> lchild -> size * ( 1-2 * alpha ) / ( 1 - alpha )) rotate ( T -> lchild , ! d ); rotate ( T , d ); pushup ( T ); } } \u5173\u4e8e\u5e73\u8861\u56e0\u5b50 \\(\\alpha\\) \u7684\u53d6\u503c\u95ee\u9898\uff0c\u5b9e\u9645\u4e0a\u53ea\u8981\u53d6\u5728\u533a\u95f4 \\([0,\\dfrac{3-\\sqrt{5}}{2}]\\) \u4e4b\u95f4\u7684\u8bdd\u90fd\u53ef\u4ee5\uff0c\u8bc1\u660e\u592a\u663e\u7136\u4e86\uff0c\u5728\u8fd9\u91cc\u53d7\u7bc7\u5e45\u9650\u5236\u5c31\u4e0d\u5c55\u5f00\u4e86\uff0c\u8bc1\u660e\u601d\u8def\u5c31\u8003\u8651\u533a\u95f4\u7684\u5b9a\u4e49\u5373\u53ef\uff0c\u5177\u4f53\u53c2\u89c1\u9ad8\u4e00\u96c6\u5408\u90e8\u5206\u3002\u4e2a\u4eba\u5b9e\u8df5\u5f97\u51fa \\(\\alpha\\) \u6700\u4f73\u53d6\u503c\u662f \\(0.2928\\) \uff0c\u4e0d\u8fc7\u5177\u4f53\u800c\u8a00\u5219\u662f\u56e0\u9898\u800c\u5f02\u3002 \u9644\u666e\u901a\u5e73\u8861\u6811\u677f\u5b50\uff1a \\(\\text{Code}\\) \u56db\u3001 \\(\\text{Weight Balanced Leafy Tree}\\) \u7684\u533a\u95f4\u64cd\u4f5c\uff1a \u00b6 \u65e2\u7136 \\(\\text{WBLT}\\) \u548c\u7ebf\u6bb5\u6811\u8fd9\u4e48\u50cf\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u6309\u7167\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\u5bf9\u5176\u8fdb\u884c\u533a\u95f4\u64cd\u4f5c\u5462\uff1f\u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u4ec5\u9488\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u6240\u80fd\u7ef4\u62a4\u7684\u64cd\u4f5c\u8fd9\u6837\u6253\u6807\u8bb0\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u5229\u7528 \\(\\text{WBLT}\\) \u8fc7\u6389\u7ebf\u6bb5\u6811\u677f\u677f\u9898\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u8fd9\u4e48\u5e72\uff0c\u4e0d\u8fc7\u788d\u4e8e\u7bc7\u5e45\u9650\u5236\uff0c\u6211\u5c31\u53ea\u597d\u5c06\u4ee3\u7801\u6254\u5230 \u4e91\u526a\u8d34\u677f \u91cc\u4e86\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u53bb\u770b\u770b\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u9047\u5230\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e0d\u4e86\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u7684 \\(\\text{WBLT}\\) \u5c31\u675f\u624b\u65e0\u7b56\u2026\u2026\u4e86\u5417\uff1f \u5176\u5b9e\u5e76\u6ca1\u6709\uff0c\u56e0\u4e3a \\(\\text{WBLT}\\) \u53ef\u4ee5\u5206\u88c2\u548c\u5408\u5e76\u7684\u7279\u6027\uff08\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u7279\u6027\u662f\u4ece\u7ebf\u6bb5\u6811\u7ee7\u627f\u8fc7\u6765\u7684\uff09\uff0c\u52a0\u4e4b\u5e73\u8861\u6811\u7684\u9ad8\u5ea6\u81ea\u7531\u6027\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u7528\u7c7b\u4f3c \\(\\text{FHQ Treap}\\) \u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u7ef4\u62a4\u4e00\u4e9b\u7ebf\u6bb5\u6811\u7279\u6027\u6240\u4e0d\u652f\u6301\u7684\u64cd\u4f5c\uff08\u56e0\u4e3a\u4ed6\u6bd5\u7adf\u4e0d\u80fd\u50cf \\(\\text{Splay}\\) \u90a3\u6837\u628a\u533a\u95f4\u65cb\u4e0a\u53bb\uff09\u3002 \u4e0d\u8fc7\uff0c \\(\\text{WBLT}\\) \u7684 \\(\\operatorname{Split}\\) \u548c \\(\\operatorname{Merge}\\) \u64cd\u4f5c\u5e76\u4e0d\u50cf \\(\\text{FHQ Treap}\\) \u90a3\u4e48\u597d\u5199\uff08\u5e76\u4e14\u5e38\u6570\u8fd8\u5927\u4e86\uff09\uff0c\u56e0\u4e3a \\(\\operatorname{Merge}\\) \u548c \\(\\operatorname{Split}\\) \u64cd\u4f5c\u6709\u53ef\u80fd\u4f1a\u8ba9\u539f\u5148\u7684 \\(\\text{WBLT}\\) \u5931\u53bb\u5176\u81ea\u8eab\u7684\u6027\u8d28\uff0c\u8fd9\u53ef\u80fd\u4e5f\u662f \\(\\text{WBLT}\\) \u4e3a\u6570\u4e0d\u591a\u7684\u75db\u70b9\u5427\uff08\u4e0d\u8fc7\u4e5f\u6709\u53ef\u80fd\u81ea\u5df1\u5199\u4e11\u4e86\uff09\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u8003\u8651\u5408\u5e76\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e24\u68f5\u6811 \\(A\\) \u548c \\(B\\) \uff1a \u82e5 \\(size_B \\ge size_A \\cdot \\alpha\\) \u5219\u76f4\u63a5\u5c06 \\(A\\) \u3001 \\(B\\) \u5408\u5e76\uff0c\u5373\u5c06 \\(A\\) \u8bbe\u4e3a\u53f3\u513f\u5b50\uff0c \\(B\\) \u8bbe\u4e3a\u5de6\u513f\u5b50\u3002 \u5426\u5219\uff0c\u8fdb\u884c\u4e0b\u8ff0\u64cd\u4f5c\uff1a \u82e5 \\(size_A \\ge size_B\\) \uff1a \u82e5\u5c06 \\(B\\) \u76f4\u63a5\u5408\u5e76\u5230 \\(A\\) \u7684\u53f3\u513f\u5b50\u80fd\u4fdd\u6301\u5e73\u8861\uff0c\u90a3\u5c31\u5408\u5e76\uff0c\u7136\u540e\u5176\u7ed3\u679c\u518d\u4e0e \\(A\\) \u7684\u5de6\u513f\u5b50\u5408\u5e76\u3002 \u5426\u5219\uff0c\u5c06 \\(A\\) \u7684\u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\u4e0e \\(A\\) \u7684\u53f3\u513f\u5b50\u8fdb\u884c\u5408\u5e76\uff0c\u5c06 \\(A\\) \u7684\u5de6\u513f\u5b50\u7684\u5de6\u513f\u5b50\u4e0e \\(B\\) \u8fdb\u884c\u5408\u5e76\uff0c\u518d\u5c06\u4e24\u8005\u7684\u5408\u5e76\u7ed3\u679c\u8fdb\u884c\u5408\u5e76\u3002 \u5426\u5219\uff1a \u82e5\u5c06 \\(A\\) \u76f4\u63a5\u5408\u5e76\u5230 \\(B\\) \u7684\u5de6\u513f\u5b50\u80fd\u4fdd\u6301\u5e73\u8861\uff0c\u90a3\u5c31\u5408\u5e76\uff0c\u7136\u540e\u5176\u7ed3\u679c\u518d\u4e0e \\(B\\) \u7684\u53f3\u513f\u5b50\u5408\u5e76\u3002 \u5426\u5219\uff0c\u5c06 \\(A\\) \u4e0e \\(B\\) \u7684\u5de6\u513f\u5b50\u7684\u5de6\u513f\u5b50\u5408\u5e76\uff0c\u5c06 \\(B\\) \u7684\u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\u4e0e \\(B\\) \u7684\u53f3\u513f\u5b50\u8fdb\u884c\u5408\u5e76\uff0c\u518d\u5c06\u4e24\u8005\u7684\u7ed3\u679c\u8fdb\u884c\u5408\u5e76\u3002 \u5b9e\u9645\u4e0a\uff0c \\(\\operatorname{Merge}\\) \u7684\u51fd\u6570\u5176\u5b9e\u672c\u8d28\u4e0a\u5c31\u662f\uff1a\u82e5\u4e24\u8005\u76f4\u63a5\u5408\u5e76\u5e73\u8861\uff0c\u5219\u76f4\u63a5\u5408\u5e76\uff0c\u5426\u5219\u5355\u65cb\u540e\u5408\u5e76\uff0c\u5426\u5219\u53cc\u65cb\u540e\u5408\u5e76\u3002 Code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 inline PNODE Merge ( PNODE a , PNODE b ) //\u6253\u5927\u5199\u592a\u9ebb\u70e6\u4e86\uff0c\u53ea\u597d\u7528\u5c0f\u5199\u4e86/kel { if ( a == nullptr ) return b ; if ( b == nullptr ) return a ; if ( b -> size >= a -> size * alpha / ( 1 - alpha )) //\u80fd\u76f4\u63a5\u5408\u5e76\u5219\u76f4\u63a5\u5408\u5e76 return mix ( a , b ); PNODE ret = nullptr ; if ( a -> size > b -> size ){ pushdown ( a ); if ( a -> lchild -> size >= ( a -> size + b -> size ) * alpha ){ ret = Merge ( a -> lchild , Merge ( a -> rchild , b )); deleteNode ( a ); //\u6b64\u65f6\u539f\u8282\u70b9 a \u53d8\u6210\u4e86\u5783\u573e\u8282\u70b9\uff0c\u8981\u56de\u6536\u7a7a\u95f4 return ret ; } pushdown ( a -> rchild ); ret = Merge ( Merge ( a -> lchild , a -> rchild -> lchild ), Merge ( a -> rchild -> rchild , b )); deleteNode ( a ); //\u6b64\u65f6\u539f\u8282\u70b9 a \u53d8\u6210\u4e86\u5783\u573e\u8282\u70b9\uff0c\u8981\u56de\u6536\u7a7a\u95f4 return ret ; } else { pushdown ( b ); if ( b -> rchild -> size >= ( a -> size + b -> size ) * alpha ){ ret = Merge ( Merge ( a , b -> lchild ), b -> rchild ); deleteNode ( b ); //\u6b64\u65f6\u539f\u8282\u70b9 b \u53d8\u6210\u4e86\u5783\u573e\u8282\u70b9\uff0c\u8981\u56de\u6536\u7a7a\u95f4 return ret ; } pushdown ( b -> lchild ); ret = Merge ( Merge ( a , b -> lchild -> lchild ), Merge ( b -> lchild -> rchild , b -> rchild )); deleteNode ( b ); //\u6b64\u65f6\u539f\u8282\u70b9 b \u53d8\u6210\u4e86\u5783\u573e\u8282\u70b9\uff0c\u8981\u56de\u6536\u7a7a\u95f4 return ret ; } } \u6ce8\u610f\uff1a \\(\\boldsymbol{\\operatorname{Merge}}\\) \u64cd\u4f5c\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\u3002 \u6709\u4e86 \\(\\operatorname{Merge}\\) \u4e86\u4ee5\u540e\uff0c \\(\\operatorname{Split}\\) \u5c31\u597d\u5199\u591a\u4e86\uff08\u5b9e\u9645\u4e0a\u4e5f\u6ca1\u597d\u5199\u5230\u54ea\u91cc\u53bb\uff09\u3002 \\(\\text{WBLT}\\) \u7684 \\(\\operatorname{Split}\\) \u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff0c\u5206\u522b\u662f\u201c\u6309\u79e9\u5206\u88c2\u201d\u548c\u201c\u6309\u503c\u5206\u88c2\u201d\u3002 \u6211\u4eec\u5148\u8c08\u8c08\u6309\u79e9\u5206\u88c2\u3002 \u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c\u82e5\u5f53\u524d\u8fd8\u8981\u5206\u88c2\u7684\u5927\u5c0f\u4e3a \\(0\\) \u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u9700\u8981\u5206\u88c2\u5417\uff1f\u663e\u7136\u4e0d\u9700\u8981\u4e86\u3002\u6545\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5206\u88c2\u51fa\u6765\u7684\u6811 \\(X\\) \u7f6e\u4e3a\u7a7a\u3002 \u90a3\u4e48\u5982\u679c\u5f53\u524d\u8981\u5206\u88c2\u7684\u6811\u662f\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u663e\u7136\u4e5f\u4e0d\u9700\u8981\u5206\u7c7b\u4e86\uff0c\u76f4\u63a5\u5c06\u6811 \\(X\\) \u7f6e\u4e3a\u5f53\u524d\u6811 \\(T\\) \u5c31\u884c\u4e86\u3002 \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u9996\u5148\u5c06\u6807\u8bb0\u4e0b\u4f20\uff0c\u7136\u540e\u5982\u679c\u5f53\u524d\u5f85\u5206\u88c2\u7684\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8e\u6211\u4eec\u5de6\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u5219\u5148\u5c06\u5de6\u5b50\u6811\u5206\u88c2\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u6211\u4eec\u9700\u8981\u7684\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u5206\u5269\u4e0b\u7684\u3002 \u6b64\u65f6 Merge \u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u5c06\u5269\u4e0b\u7684\u548c\u6811 \\(T\\) \u7684\u5de6\u5b50\u6811\u8fdb\u884c\u5408\u5e76\uff0c\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\u53e6\u4e00\u90e8\u5206\u6811 \\(Y\\) \u3002 \u5bf9\u4e8e\u53f3\u5b50\u6811\uff0c\u6211\u4eec\u8fdb\u884c\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u5728\u5206\u88c2\u53f3\u5b50\u6811\u65f6\u6240\u7528\u7684\u5927\u5c0f\u5e94\u5f53\u662f\u539f\u5927\u5c0f\u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f\u3002 Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // \u5148\u884c\u6ce8\u610f\uff0c\u4f20\u53c2\u4e4b\u524d\u8bf7\u5148\u5c06\u5b50\u6811 X \u548c Y \u7f6e\u4e3a nullptr\u3002 void Split ( PNODE T , int x , PNODE & X , PNODE & Y ){ if ( ! x ){ Y = T ; return ; } if ( isLeaf ( T )){ X = T ; return ; } pushdown ( T ); if ( x <= X -> lchild -> size ){ PNODE bufY = nullptr ; Split ( T -> lchild , x , X , bufY ); Y = Merge ( bufY , T -> rchild ); } else { PNODE bufX = nullptr ; Split ( T -> rchild , x - T -> lchild -> size , bufX , Y ); X = Merge ( T -> lchild , bufX ); } } \u81f3\u4e8e\u6309\u503c\u5206\u88c2\uff0c\u5b9e\u9645\u4e0a\u548c\u6309\u79e9\u5206\u88c2\u662f\u4e00\u6a21\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u6309\u503c\u5206\u88c2\u4e0d\u9700\u8981\u5224\u65ad \\(x\\) \u662f\u5426\u4e3a \\(0\\) \uff0c\u4e14\u5206\u88c2\u53f3\u5b50\u6811\u7684\u65f6\u5019\u4e0d\u9700\u8981\u5c06 \\(x\\) \u51cf\u53bb\u5de6\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u5269\u4e0b\u5c31\u57fa\u672c\u4e0a\u4e00\u6a21\u4e00\u6837\u4e86\u3002\u788d\u4e8e\u7bc7\u5e45\u9650\u5236\uff0c\u6211\u4eec\u5c31\u4e0d\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u3002 \u6ce8\u610f\uff1a\u82e5 \\(\\operatorname{Merge}\\) \u548c \\(\\operatorname{Split}\\) \u6267\u884c\u6b21\u6570\u8fc7\u591a\uff0c\u5219\u4f1a\u4ea7\u751f\u65e0\u6cd5\u63a5\u53d7\u7684\u5783\u573e\u8282\u70b9\u6570\u91cf\uff0c\u6545\u6211\u4eec\u5728\u5199 \\(\\operatorname{Merge}\\) \u548c \\(\\operatorname{Split}\\) \u7684\u65f6\u5019\uff0c\u8bf7\u52a1\u5fc5\u505a\u597d\u5783\u573e\u56de\u6536\uff01\uff01 \u9644\u6587\u827a\u5e73\u8861\u6811\u4ee3\u7801\uff1a \\(\\text{Code}\\) \u4e94\u3001 \\(\\text{Weight Balanced Leafy Tree}\\) \u5b9e\u73b0\u53ef\u5e76\u5806\uff1a \u00b6 \u5728\u8bb2 \\(\\text{WBLT}\\) \u7684\u53ef\u6301\u4e45\u5316\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8bb2\u70b9\u6574\u6d3b\u7684\u90e8\u5206\u3002 \u76ee\u524d\u597d\u50cf\u662f\u6ca1\u6709\u627e\u5230\u54ea\u4e00\u7bc7\u6587\u7ae0\u5199 \\(\\text{WBLT}\\) \u600e\u4e48\u5b9e\u73b0\u53ef\u5e76\u5806\uff0c\u4e0d\u8fc7\u53ef\u80fd\u662f\u56e0\u4e3a\u5176\u601d\u8def\u8fc7\u4e8e\u7b80\u5355\u6216\u8005\u662f\u5de6\u504f\u6811\u5b9e\u5728\u662f\u592a\u597d\u5199\u4e86\u3002 \u6309\u7167\u60ef\u4f8b\uff0c\u6211\u4eec\u5148\u6765\u56de\u987e\u4e00\u4e0b\u5806\u7684\u6027\u8d28\uff1a \u6839\u8282\u70b9\u5927\u4e8e\u7b49\u4e8e\u6216\u5c0f\u4e8e\u7b49\u4e8e\u5176\u6240\u6709\u7684\u513f\u5b50\u8282\u70b9 \u5806\u662f\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u7136\u540e\uff0c\u6211\u4eec\u628a\u76ee\u5149\u653e\u5230\u6240\u6709 \\(\\text{WBLT}\\) \u8282\u70b9\u4e0a\uff0c\u5c24\u5176\u662f\u975e\u53f6\u5b50\u8282\u70b9\u4e0a\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u5e73\u65f6\u5728\u5e73\u8861\u6811\u4e0a\u6240\u770b\u4e0d\u5230\u7684\u4e1c\u897f\uff1a \u7236\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u5176\u8868\u793a\u7684\u533a\u95f4\u7684\u6700\u5927\u503c\u3002 \u8bf6\uff0c\u7b49\u7b49\uff0c\u8fd9\u4e0d\u5c31\u610f\u5473\u7740\u7236\u8282\u70b9\u662f\u5b83\u6240\u4ee3\u8868\u7684\u533a\u95f4\u5185\u7684\u503c\u6700\u5927\u7684\u8282\u70b9\u5417\uff1f\u786e\u5b9e\uff0c\u6240\u4ee5\u6211\u4eec\u6b64\u65f6\u4e0d\u96be\u770b\u51fa\uff0c \\(\\text{WBLT}\\) \u7684\u672c\u8eab\u4e5f\u662f\u6ee1\u8db3\u5806\u7684\u6027\u8d28 \\(1\\) \u7684\u3002 \u81f3\u4e8e\u6027\u8d28 \\(2\\) \uff0c\u5144\u5f1f\uff0c\u8fd9\u662f\u5e73\u8861\u6811\u554a\uff01\uff01\u6240\u4ee5 \\(\\text{WBLT}\\) \u662f\u53ef\u4ee5\u5f53\u5806\u4f7f\u7684\u3002 \u53c8\u56e0\u4e3a \\(\\text{WBLT}\\) \u652f\u6301\u5408\u5e76\uff0c\u6240\u4ee5\u81ea\u7136\u800c\u7136\u7684\u5c31\u53ef\u4ee5\u505a\u53ef\u5e76\u5806\u6765\u4f7f\u4e86\u3002 \u788d\u4e8e\u7bc7\u5e45\u9650\u5236\uff0c\u6211\u5c06\u8fc7\u6389\u53ef\u5e76\u5806\u6a21\u677f\u9898\u7684\u4ee3\u7801\u653e\u5230 \u4e91\u526a\u8d34\u677f \u91cc\u9762\u4e86\uff0c\u6709\u5174\u8da3\u7684\u5927\u5bb6\u53ef\u4ee5\u53bb\u5eb7\u4e00\u5eb7\uff0c\u987a\u4fbf\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u6570\u636e\u80fd\u628a\u5b83\u5361\u6389\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002","title":"$\\text{Weight Balanced Leafy Tree}$ \u5b66\u4e60\u7b14\u8bb0\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/WBLT/#textweight-balanced-leafy-tree","text":"","title":"\\(\\text{Weight Balanced Leafy Tree}\\) \u5b66\u4e60\u7b14\u8bb0\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/WBLT/#_1","text":"\u5728\u8fd9\u91cc\u5341\u5206\u5341\u5206\u611f\u8c22 \\(\\text{lxl}\\) \u548c\u738b\u601d\u9f50\u53d1\u660e\u548c\u603b\u7ed3\u4e86 \\(\\text{WBLT}\\) \u3002 \u56e0\u4e3a\u7f51\u4e0a\u5173\u4e8e \\(\\text{WBLT}\\) \u7684\u6b63\u786e\u8bb2\u89e3\uff08\u5df2\u9664\u53bb\u90a3\u7bc7\u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587\uff0c\u4e0d\u8fc7\u4f2a\u4ee3\u7801\u548c\u56fe\u7247\u90e8\u5206\u7684\u5c0f\u7ec6\u8282\u9519\u8bef\u8fd8\u662f\u4e0d\u5c11\u7684\uff09\u975e\u5e38\u7684\u5c11\uff08\u5305\u62ec OI-Wiki \u4e0a\u7684 \\(\\text{Leafy Tree}\\) \u548c \\(\\text{WBLT}\\) \u7684\u4e13\u9898\u5199\u7684\u4e5f\u5168\u662f\u5047\u7684\u3002\u53cd\u6b63\u57fa\u672c\u4e0a\u53ea\u8981\u7528\u5355\u65cb\u7684\u5168\u662f\u5047\u7684\uff0c\u4e0d\u670d\u7684\u53ef\u4ee5\u628a\u4ee3\u7801\u7ed9\u6211\uff0c\u6211\u6559\u4f60\u5361\uff09\uff0c\u6240\u4ee5\u5199\u4e0b\u4e86\u672c\u7bc7\u7b14\u8bb0\u6765\u548c\u5927\u5bb6\u4e00\u8d77\u4ea4\u6d41\u3002 \u56e0\u4e3a\u672c\u4eba\u5c1a\u83dc\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u638c\u63e1 \\(\\text{WBLT}\\) \uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5e76\u6ca1\u6709\u505a\u5b8c\u90a3\u51e0\u9053\u7ecf\u5178\u7684 \\(\\text{WBLT}\\) \u9898\u76ee\uff09\uff0c\u4e0d\u8fc7\u540e\u9762\u4f1a\u6162\u6162\u66f4\u65b0\u3002 \u5982\u82e5\u60f3\u8981\u6109\u5feb\u7684\u770b\u5b8c\u672c\u7bc7\u7b14\u8bb0\uff0c\u5efa\u8bae\u5b66\u4e60\u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9\u7684\u601d\u60f3\uff08\u5e94\u8be5\u7b97 \\(\\text{trick}\\) \u5427\uff09\u3002","title":"\u524d\u8a00\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/WBLT/#_2","text":"","title":"\u524d\u7f6e\u77e5\u8bc6\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/WBLT/#textleafy-tree","text":"\u5176\u5b9e \\(\\text{Leafy Tree}\\) \u662f\u4e00\u7c7b\u6811\uff0c\u5b83\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u539f\u59cb\u6570\u636e\u653e\u5728\u53f6\u8282\u70b9\u4e2d\uff0c\u800c\u975e\u53f6\u5b50\u8282\u70b9\u7ef4\u62a4\u533a\u95f4\u5185\u7684\u4fe1\u606f\u3002 \u542c\u5b8c\u6838\u5fc3\u601d\u60f3\uff0c\u6211\u60f3\u5927\u5bb6\u4e00\u5b9a\u60f3\u5230\u4e86\u4e00\u4e2a\u6211\u4eec\u559c\u95fb\u4e50\u89c1\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014\u7ebf\u6bb5\u6811\u3002\u6ca1\u9519\uff0c\u7ebf\u6bb5\u6811\u672c\u8d28\u4e0a\u4e5f\u5c5e\u4e8e \\(\\text{Leafy Tree}\\) \uff0c\u5176\u7279\u5f81\u975e\u5e38\u660e\u663e\uff0c\u53f6\u5b50\u7ed3\u70b9\u7ef4\u62a4\u7684\u662f\u539f\u59cb\u4fe1\u606f\uff0c\u800c\u975e\u53f6\u5b50\u8282\u70b9\u4f60\u60f3\u8981\u7ef4\u62a4\u7684\u533a\u95f4\u4fe1\u606f\u3002 \u5176\u5b9e\uff0c\u6211\u8ba4\u4e3a\u57fa\u4e8e \\(\\text{Leafy Tree}\\) \u7684 \\(\\text{BST}\\) \u5b9e\u73b0\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u7ef4\u62a4 \u533a\u95f4\u6700\u5927\u503c \u7684\u7ebf\u6bb5\u6811\uff0c\u5b83\u8d4b\u4e88\u4e86\u7ebf\u6bb5\u6811 \\(\\text{BST}\\) \u7684\u6027\u8d28\uff0c\u52a0\u4ee5\u53bb\u9664\u90e8\u5206\u7684\u65e0\u7528\u8282\u70b9\uff0c\u5f62\u6210\u4e00\u68f5\u5341\u5206\u81ea\u7531\u7684\u7ebf\u6bb5\u6811\u3002 \u5982\u679c\u5404\u4f4d\u5bf9\u7ebf\u6bb5\u6811\u5341\u5206\u719f\u6089\uff08\u5c24\u5176\u662f\u52a8\u6001\u5f00\u70b9\uff09\uff0c\u4e0b\u9762\u5185\u5bb9\u5c06\u4f1a\u7ed9\u4f60\u4e00\u79cd\u5341\u5206\u719f\u6089\u7684\u611f\u89c9\u3002 \u4e0b\u9762\u5c06\u8bf4\u57fa\u4e8e \\(\\text{Leafy Tree}\\) \u7684 \\(\\text{BST}\\) \u5b9e\u73b0\u3002","title":"\u4e00\u3001\\(\\text{Leafy Tree}\\)\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/WBLT/#textleafy-tree-textbst","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u68b3\u7406\u4e00\u4e0b \\(\\text{BST}\\) \u548c \\(\\text{Leafy Tree}\\) \u7684\u6027\u8d28\uff1a \\(\\text{BST}\\) \uff1a \u5bf9\u4e8e\u4efb\u610f\u4e00\u68f5 \\(\\text{BST}\\) \u6765\u8bf4\uff0c\u5176\u6839\u8282\u70b9\u7684\u5de6\u513f\u5b50\u4e00\u5b9a\u4e0d\u5927\u4e8e\u6839\u8282\u70b9\uff0c\u6839\u8282\u7684\u53f3\u513f\u5b50\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u6839\u8282\u70b9\u3002 \u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5176\u82e5\u5c0f\u4e8e\u7b49\u4e8e\u6839\u8282\u70b9\uff0c\u5219\u5411\u5de6\u8d70\uff0c\u5176\u82e5\u5927\u4e8e\u6839\u8282\u70b9\uff0c\u5219\u5411\u53f3\u8d70\u3002 \\(\\text{Leafy Tree}\\) \uff1a \u5bf9\u4e8e\u4efb\u610f\u4e00\u68f5 \\(\\text{Leafy Tree}\\) \u6765\u8bf4\uff0c\u5176\u53f6\u5b50\u7ed3\u70b9\u4e00\u5b9a\u662f\u7ef4\u62a4\u7684\u539f\u59cb\u6570\u636e\uff0c\u5176\u975e\u53f6\u5b50\u8282\u70b9\u4e00\u5b9a\u662f\u7ef4\u62a4\u7684\u533a\u95f4\u4fe1\u606f\u3002 \u65e0\u8bba\u4f55\u65f6\uff0c \\(\\text{Leafy Tree}\\) \u7684\u4e00\u4e2a\u8282\u70b9\u8981\u4e48\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u8981\u4e48\u6ca1\u6709\u513f\u5b50\u3002 \u6b64\u65f6\uff0c\u6839\u636e \\(\\text{Leafy Tree}\\) \u7684\u6027\u8d28 \\(1\\) \uff0c\u6211\u4eec\u5c06\u6240\u6709\u7684\u539f\u59cb\u6570\u636e\u8282\u70b9\u90fd\u653e\u5728\u53f6\u5b50\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u6bcf\u4e24\u4e2a\u8282\u70b9\u4e0a\u65b9\u52a0\u4e00\u4e2a\u4ed6\u4eec\u7684\u7236\u4eb2\uff0c\u7ef4\u62a4\u7684\u662f\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u5927\u503c\uff08\u6ce8\u610f\uff0c\u6b64\u65f6\u7684\u4e24\u4e2a\u8282\u70b9\u4e0d\u4e00\u5b9a\u662f\u4e24\u4e2a\u539f\u59cb\u6570\u636e\u8282\u70b9\uff09\u3002 \u6839\u636e \\(\\text{BST}\\) \u7684\u6027\u8d28 \\(1\\) \u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u7ed3\u8bba \\(1\\) \uff1a \u5de6\u513f\u5b50\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u3002 \u6839\u636e\u8fd9\u4e00\u7ed3\u8bba\uff0c\u6211\u4eec\u89c4\u5b9a \\(\\text{Leafy Tree}\\) \u4e0a\u7684\u6bcf\u4e00\u4e2a\u5de6\u513f\u5b50\u8981\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u3002 \u7136\u540e\u4e00\u68f5\u57fa\u4e8e \\(\\text{Leafy Tree}\\) \u7684 \\(\\text{BST}\\) \u96cf\u5f62\u5c31\u51fa\u6765\u4e86\uff0c\u6211\u4eec\u518d\u6765\u68b3\u7406\u4e00\u4e0b\uff1a \u4efb\u4f55\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7ef4\u62a4\u7684\u90fd\u662f\u5176\u6240\u4ee3\u8868\u7684\u533a\u95f4\u7684\u6700\u5927\u503c\u3002 \u4efb\u4f55\u4e00\u4e2a\u5de6\u513f\u5b50\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u513f\u5b50\u3002 \u771f\u5b9e\u7684\u6570\u636e\u90fd\u5904\u4e8e\u53f6\u5b50\u8282\u70b9\u4e2d\u3002 \u6839\u636e\u4e0a\u8ff0\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u67e5\u627e\u4e86\uff0c\u601d\u8def\u5982\u4e0b\uff1a \u5982\u679c\u5f53\u524d\u8981\u67e5\u627e\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u503c\uff0c\u5219\u53bb\u5de6\u513f\u5b50\u4e2d\u627e\uff0c\u5426\u5219\u53bb\u53f3\u513f\u5b50\u627e\u3002 \u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u5224\u65ad\u662f\u5426\u76f8\u7b49\uff0c\u82e5\u4e0d\u76f8\u7b49\uff0c\u5219\u8bf4\u660e\u6ca1\u6709\u67e5\u627e\u503c\uff0c\u5426\u5219\u627e\u5230\u67e5\u627e\u503c\u3002 Code\uff1a 1 2 3 4 5 6 7 bool Find ( PNODE T , int x ){ if ( isLeaf ( T )) return T -> value == x ; if ( x <= T -> lchild -> value ) return Find ( T -> lchild , x ); return Find ( T -> rchild , x ); } \u73b0\u5728\uff0c\u6211\u4eec\u6765\u601d\u8003\u63d2\u5165\uff1a \u82e5\u6211\u4eec\u6709\u4e00\u4e2a\u5f85\u63d2\u5165\u7684\u65b0\u8282\u70b9 \\(x\\) \uff0c\u5219\u6839\u636e \\(\\text{Leafy Tree}\\) \u7684\u6027\u8d28 \\(1\\) \uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u51fa\u8fd9\u4e2a\u65b0\u8282\u70b9\u4e00\u5b9a\u662f\u5728\u53f6\u5b50\u4e0a\u7684\u3002\u7efc\u5408\u4e00\u4e0b\uff0c\u5c31\u4e0d\u96be\u5f97\u51fa\u63d2\u5165\u7684\u601d\u8def\uff1a \u5982\u679c\u5f53\u524d\u5f85\u63d2\u5165\u65b0\u8282\u70b9 \\(x\\) \u7684\u503c\u662f\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u5de6\u513f\u5b50\u7684\u503c\uff0c\u5219\u8fdb\u5165\u5f53\u524d\u8282\u70b9\u5de6\u513f\u5b50\uff0c\u5426\u5219\u8fdb\u5165\u5f53\u524d\u8282\u70b9\u53f3\u513f\u5b50\uff0c\u7136\u540e\u66f4\u65b0\u5f53\u524d\u8282\u70b9\uff08\u6ce8\u610f\uff0c\u4e00\u5b9a\u8981\u66f4\u65b0\u5f53\u524d\u8282\u70b9\uff09\u3002 \u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a \u5efa\u7acb\u4e24\u4e2a\u65b0\u8282\u70b9\uff0c\u4e00\u4e2a\u7684\u503c\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u53e6\u4e00\u4e2a\u7684\u503c\u7b49\u4e8e\u65b0\u8282\u70b9\u7684\u503c\u3002 \u6bd4\u8f83\u4e24\u4e2a\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u5c06\u503c\u8f83\u5927\u7684\u8282\u70b9\u8bbe\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u8f83\u5c0f\u7684\u8bbe\u4e3a\u5de6\u513f\u5b50\uff08\u4f9d\u636e\u6027\u8d28 \\(2\\) \uff09\u3002 \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u3002 Code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void Insert ( PNODE T , int x ){ if ( isLeaf ( T )){ T -> lchild = newNode ( x ); T -> rchild = newNode ( x ); if ( T -> lchild > T -> rchild ) swap ( T -> lchild , T -> rchild ); T -> value = T -> rchild -> value ; pushup ( T ); return ; } if ( x <= T -> lchild -> value ) Insert ( T -> lchild , x ); else Insert ( T -> rchild , x ); pushup ( T ); } \u90a3\u4e48\u81f3\u4e8e\u5220\u9664\u64cd\u4f5c\uff0c\u5219\u66f4\u52a0\u7684\u66b4\u529b\uff1a \u82e5\u5f53\u524d\u8282\u70b9\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u76f4\u63a5\u9000\u51fa\uff08\u56e0\u4e3a\u6b64\u65f6\u6211\u4eec\u7684\u6811\u4e3a\u7a7a\uff09\u3002 \u82e5\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f85\u5220\u9664\u7684\u8282\u70b9\u7684\u503c\uff0c\u5219\u8fdb\u884c\u4e0b\u5217\u64cd\u4f5c\uff1a \u82e5\u5de6\u513f\u5b50\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u82e5\u5de6\u513f\u5b50\u7684\u503c\u4e0e\u5f85\u5220\u9664\u8282\u70b9\u76f8\u540c\uff0c\u8fdb\u884c\u4e0b\u8ff0\u64cd\u4f5c\uff1a \u5220\u9664\u5de6\u513f\u5b50\u3002 \u5c06\u53f3\u513f\u5b50\u7684\u503c\u8d4b\u7ed9\u5f53\u524d\u8282\u70b9\u3002 \u5220\u9664\u53f3\u513f\u5b50\u3002 \u5426\u5219\uff0c\u5c31\u8d70\u8fdb\u5de6\u513f\u5b50\u3002 \u5426\u5219\uff0c\u5bf9\u53f3\u513f\u5b50\u8fdb\u884c\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002 Code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 void Delete ( PNODE T , int x ){ if ( isLeaf ( T )) return ; if ( x <= T -> lchild -> value ){ if ( isLead ( T -> lchild )){ if ( T -> lchild -> value != x ) return ; deleteNode ( T -> lchild ); PNODE buf = T -> rchild ; * T = * buf ; deleteNode ( buf ); } else Delete ( T -> lchild , x ); } else { if ( isLeaf ( T -> rchild )){ if ( T -> rchild -> value != x ) return ; deleteNode ( T -> rchild ); PNODE buf = T -> lchild ; * T = * buf ; deleteNode ( buf ); } else Delete ( T -> rchild , x ); } pushup ( T ); }","title":"\u4e8c\u3001\u57fa\u4e8e \\(\\text{Leafy Tree}\\) \u7684 \\(\\text{BST}\\) \u5b9e\u73b0\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/WBLT/#textweight-balanced-leafy-tree_1","text":"\u9996\u5148\uff0c\u6211\u4eec\u5f15\u5165\u6982\u5ff5 \\(\\text{Weight Balanced Tree}\\) \uff08\u6743\u5e73\u8861\u6811\uff0c\u53c8\u540d \\(\\text{BB}\\;[\\alpha]\\) \u6811\uff09\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u4f9d\u7167\u6b63\u5e38\u7684\u65b9\u6cd5\u63d2\u5165\u5220\u9664\u8282\u70b9\uff0c\u7136\u540e\u5982\u679c\u5de6\u53f3\u5b50\u6811\u6bd4\u4f8b\u4e0d\u6ee1\u8db3\u5e73\u8861\u7cfb\u6570 \\(\\alpha\\) \u7684\u8bdd\uff0c\u5219\u7ef4\u62a4\u5e73\u8861\u3002 \u542c\u5230\u8fd9\u4e00\u70b9\uff0c\u5927\u5bb6\u80af\u5b9a\u60f3\u5230\u4e86\u77e5\u540d\u7684\u66ff\u7f6a\u7f8a\u6811\u3002\u786e\u5b9e\uff0c\u66ff\u7f6a\u7f8a\u6811\u5c5e\u4e8e \\(\\text{Weight Balanced Tree}\\) \u7684\u4e00\u79cd\uff0c\u5176\u7ef4\u62a4\u65b9\u5f0f\u66b4\u529b\u91cd\u6784\u4e5f\u662f \\(\\text{Weight Balanced Tree}\\) \u7684\u4e00\u4e2a\u7ef4\u62a4\u5e73\u8861\u7684\u65b9\u5f0f\u4e4b\u4e00\u3002 \u7136\u800c \\(\\text{Weight Balanced Tree}\\) \u53ea\u80fd\u66b4\u529b\u91cd\u6784\u7ef4\u62a4\u5e73\u8861\u5417\uff1f\u663e\u7136\u4e0d\u662f\uff0c\u9664\u4e86\u91cd\u6784\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u50cf \\(\\text{AVL}\\) \u6811\u4e00\u6837\u65cb\u8f6c\u6765\u7ef4\u62a4\u5e73\u8861\uff0c\u800c \\(\\text{Weight Balanced Leafy Tree}\\) \u7ef4\u62a4\u5e73\u8861\u7684\u65b9\u5f0f\u5c31\u662f\u65cb\u8f6c\u3002 \\(\\text{Weight Balanced Leafy Tree}\\) \u7684\u65cb\u8f6c\u5206\u4e3a\u5355\u65cb\u548c\u53cc\u65cb\uff1a \u5355\u65cb\u957f\u8fd9\u6837\uff1a \u800c\u53cc\u65cb\u5219\u662f\u8fd9\u6837\u7684\uff1a \u6ce8\u610f\uff1a\u518d\u6b21\u5f3a\u8c03\uff0c\u4e00\u5b9a\u8981\u6709\u53cc\u65cb\uff0c\u4e0d\u7136\u5e73\u8861\u6027\u662f\u5047\u7684 \u7136\u540e\u6e90\u4ee3\u7801\u548c\u4e0d\u5e73\u8861\u7684 \\(\\text{Leafy Tree}\\) \u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u7ed9\u6bcf\u4e2a\u8282\u70b9\u52a0\u4e0a\u5c5e\u6027 \\(size\\) \uff0c\u7136\u540e\u6bcf\u6b21\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u7ef4\u62a4\u4e00\u4e0b\u6811\u7684\u5e73\u8861\u5e76\u4e14\u4e0a\u4f20\u7684\u65f6\u5019\u522b\u5fd8\u4e86 \\(size\\) \u7684\u4fe1\u606f\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\u3002 Code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void rotate ( PNODE T , bool d ){ PNODE temp ; if ( ! d ){ temp = T -> rchild ; T -> rchild = T -> lchild ; T -> lchild = T -> rchild -> lchild ; T -> rchild -> lchild = T -> rchild -> rchild ; T -> rchild -> rchild = temp ; } else { temp = T -> lchild ; T -> lchild = T -> rchild ; T -> rchild = T -> lchild -> rchild ; T -> lchild -> rchild = T -> lchild -> lchild ; T -> lchild -> lchild = temp ; } pushup ( T -> lchild ); pushup ( T -> rchild ); pushup ( T ); //\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e00\u5b9a\u8981\u5148 pushup \u513f\u5b50\uff0c\u518d pushup \u7236\u4eb2 } \u65e2\u7136\u5df2\u7ecf\u4ecb\u7ecd\u5b8c\u4e86\u7ef4\u62a4\u5e73\u8861\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u5f53\u5728\u4ec0\u4e48\u65f6\u5019\u7ef4\u62a4\u5e73\u8861\u5462\uff1f \u9996\u5148\uff0c\u6211\u4eec\u8bbe\u4e00\u4e2a\u8282\u70b9\u7684\u5e73\u8861\u5ea6\u4e3a \\(\\rho\\) \uff0c \\(\\rho\\) \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \\[\\rho_x=\\dfrac{weight_{x.left}}{weight_x}\\] \u5176\u4e2d\u7684 \\(weight_x\\) \u8868\u793a\u5b50\u6811 \\(x\\) \u6240\u5305\u542b\u7684\u53f6\u8282\u70b9\u6570\u91cf\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u8ba4\u4e3a\u4e00\u4e2a\u8282\u70b9\u662f\u5e73\u8861\u7684\u5f53\u4e14\u4ec5\u5f53 \\(\\rho\\) \u6ee1\u8db3 \\(\\rho \\ge \\alpha\\) \u4e14 \\(1-\\rho \\ge \\alpha\\) \uff0c\u82e5\u5f53\u524d\u8282\u70b9\u4e0d\u5e73\u8861\uff0c\u5219\u82e5 \\(\\rho_{son} \\ge \\dfrac {1-2\\alpha}{1-\\alpha}\\) \uff0c\u5219\u8fdb\u884c\u53cc\u65cb\uff0c\u5426\u5219\u8fdb\u884c\u5355\u65cb\u3002 \u90a3\u4e48\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4f9d\u7167\u8fd9\u4e2a\u539f\u5219\u6765\u7ef4\u62a4\u5462\uff1f\u6211\u4eec\u6765\u5c1d\u8bd5\u8bc1\u660e\u4e00\u4e0b\uff1a \u6211\u4eec\u6839\u636e\u5355\u65cb\u7684\u56fe\u793a\uff0c\u8bbe \\(\\rho_x\\) \u4e3a\u8282\u70b9 \\(X\\) \u7684\u5e73\u8861\u5ea6\uff0c \\(\\rho_y\\) \u8868\u793a\u8282\u70b9 \\(Y\\) \u7684\u5e73\u8861\u5ea6\uff0c \\(\\gamma_y\\) \u4e3a \u5355\u65cb\u540e\u8282\u70b9 \\(\\boldsymbol{Y}\\) \u7684\u5e73\u8861\u5ea6\u3002 \u6839\u636e\u56fe\u793a\u548c\u5df2\u77e5\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\uff1a \\[0 < \\rho_x < \\alpha\\] \\[\\alpha \\le \\rho_y \\le 1-\\alpha\\] \u6839\u636e\u56fe\u793a\u548c\u5355\u65cb\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u4e0d\u96be\u770b\u51fa \\(\\rho_x\\) \u3001 \\(\\rho_y\\) \u3001 \\(\\gamma_y\\) \u5177\u6709\u4ee5\u4e0b\u5173\u7cfb\uff1a \\[\\gamma_y = \\rho_x + \\rho_y - \\rho_x\\rho_y\\] \u6211\u4eec\u5df2\u77e5 \\(\\rho_x\\) \u548c \\(\\gamma_y\\) \u5c31\u662f\u5f53\u524d\u5b50\u6811\u65cb\u8f6c\u524d\u548c\u65cb\u8f6c\u540e\u7684\u5e73\u8861\u5ea6\uff0c\u800c\u6211\u4eec\u65cb\u8f6c\u540e\u5b50\u6811\u60f3\u8981\u8fbe\u5230\u5e73\u8861\uff0c\u5219\u9700\u8981\uff1a \\[\\alpha \\le \\gamma_y \\le 1-\\alpha\\] \u6211\u4eec\u6b64\u65f6\u53ef\u4ee5\u5c06\u76ee\u6807\u62c6\u6210\u4e24\u90e8\u5206\uff0c\u5206\u522b\u662f\uff1a \\[ \\begin{cases} \\gamma_y \\ge \\alpha \\\\ \\gamma_y \\le 1 - \\alpha \\end{cases} \\] \u6b64\u65f6\uff0c\u5c06 \\(\\rho_x\\) \u3001 \\(\\rho_y\\) \u3001 \\(\\gamma_y\\) \u7684\u5173\u7cfb\u4ee3\u5165\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u6613\u5f97\uff1a \\[ \\begin{cases} \\rho_x + \\rho_y - \\rho_x\\rho_y \\ge \\alpha \\\\ \\rho_x + \\rho_y - \\rho_x\\rho_y \\le 1 - \\alpha \\end{cases} \\] \u5c06\u5f0f\u5b50\u7a0d\u5fae\u53d8\u5f62\uff0c\u5373\u5f97\uff1a \\[ \\begin{cases} \\rho_y \\ge \\dfrac {\\alpha - \\rho_x}{1-\\rho_x} \\\\\\\\ \\rho_y \\le \\dfrac {1 - \\alpha- \\rho_x}{1-\\rho_x} \\end{cases} \\] \u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e0b\u5217\u4e24\u4e2a\u547d\u9898\uff1a \\[1.\\;\\forall \\rho_y \\in [\\alpha, 1-\\alpha]\\;,\\; \\rho_x \\in [0, \\alpha ]\\qquad \\rho_y \\ge \\dfrac {\\alpha - \\rho_x}{1-\\rho_x}\\] \\[2.\\;\\forall \\rho_y \\in [\\alpha, 1-\\alpha]\\;,\\; \\rho_x \\in [0, \\alpha ]\\qquad \\rho_y \\le \\dfrac {1- \\alpha - \\rho_x}{1-\\rho_x}\\] \u6211\u4eec\u6b64\u65f6\u7684\u95ee\u9898\u4e5f\u53d8\u6210\u4e86\u8bc1\u660e\u4e0a\u8ff0\u4e24\u4e2a\u547d\u9898\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u540c\u65f6\u6210\u7acb\u3002 \u547d\u9898 \\(1\\) \u5728\u5df2\u77e5\u6761\u4ef6\u4e0b\u662f\u663e\u7136\u6210\u7acb\u7684\uff0c\u56e0\u4e3a\u539f\u547d\u9898\u7b49\u4e8e\uff1a \\[\\forall \\rho_y \\in [\\alpha, 1-\\alpha]\\;,\\; \\rho_x \\in [0, \\alpha ]\\qquad \\rho_y \\ge (\\dfrac {\\alpha - \\rho_x}{1-\\rho_x})_{\\max}\\] \u6839\u636e\u7cd6\u6c34\u4e0d\u7b49\u5f0f\uff0c\u6613\u5f97\uff1a \\[(\\dfrac {\\alpha - \\rho_x}{1-\\rho_x})_{\\max} = \\alpha\\] \u6545\u6b64\u65f6\uff0c\u547d\u9898 \\(1\\) \u663e\u7136\u6210\u7acb\u3002 \u90a3\u4e48\uff0c\u5173\u4e8e\u547d\u9898 \\(2\\) \uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6709\u76f8\u4f3c\u7684\u8bc1\u660e\u8fc7\u7a0b\uff1a \\[\\forall \\rho_y \\in [\\alpha, 1-\\alpha]\\;,\\; \\rho_x \\in [0, \\alpha ]\\qquad \\rho_y \\le (\\dfrac {1 - \\alpha - \\rho_x}{1-\\rho_x})_{\\min}\\] \u6839\u636e\u7cd6\u6c34\u4e0d\u7b49\u5f0f\uff0c\u6613\u5f97\uff1a \\[ \\begin{array}{ll} (\\dfrac {1 - \\alpha - \\rho_x}{1 -\\rho_x})_{\\min} &= \\dfrac{1-\\alpha-\\alpha}{1-\\alpha}\\\\\\\\ &=\\dfrac{1-2\\alpha}{1-\\alpha} \\end{array} \\] \u4ee3\u5165\u539f\u5f0f\uff0c\u5219\u5f97\u5230\uff1a \\[\\forall \\rho_y \\in [\\alpha, 1-\\alpha]\\qquad \\rho_y \\le \\dfrac{1-2\\alpha}{1-\\alpha}\\] \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53 \\(\\rho_y \\in (\\dfrac{1-2\\alpha}{1-\\alpha},1-\\alpha]\\) \u7684\u65f6\u5019\uff0c\u547d\u9898\u4e8c\u4e0d\u6210\u7acb\uff0c\u6545\u6211\u4eec\u9700\u8981\u5bf9 \\(\\rho_y\\) \u7684\u8303\u56f4\u8fdb\u884c\u6536\u7f29\u5230 \\(\\rho_y \\in [\\alpha, \\dfrac{1-2\\alpha}{1-\\alpha}]\\) \u4e0a\u8ff0\u4e24\u4e2a\u547d\u9898\u624d\u540c\u65f6\u6210\u7acb\u3002 \u7efc\u4e0a\uff0c\u82e5\u5355\u65cb\u80fd\u7ef4\u6301\u5e73\u8861\u6027\uff0c\u5219\u9700\u8981 \\(\\rho_y \\le \\dfrac{1-2\\alpha}{1-\\alpha}\\) \uff0c\u5426\u5219\u5219\u5fc5\u987b\u8fdb\u884c\u53cc\u65cb\u3002 \u8bc1\u6bd5\u3002 \u6240\u4ee5\u6b64\u65f6\u7684\u7ef4\u62a4\u5e94\u5f53\u8fd9\u4e48\u5199\uff1a \u82e5\u5f53\u524d\u8282\u70b9 \u5de6\u513f\u5b50\u7684\u5927\u5c0f \u4e0e \u5f53\u524d\u8282\u70b9\u7684\u5927\u5c0f \u7684\u6bd4\u503c\u5c0f\u4e8e \\(\\alpha\\) \uff0c\u5219\uff1a \u82e5\u5f53\u524d \u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u7684\u5927\u5c0f \u4e0e \u5f53\u524d\u53f3\u513f\u5b50\u7684\u5927\u5c0f \u7684\u6bd4\u503c\u5927\u4e8e\u7b49\u4e8e \\(\\dfrac{1-2\\alpha}{1-\\alpha}\\) \uff0c\u5219\u8fdb\u884c\u53cc\u65cb\u3002 \u5426\u5219\u8fdb\u884c\u5355\u65cb\u3002 \u5426\u5219\u82e5\u5f53\u524d\u8282\u70b9 \u53f3\u513f\u5b50\u7684\u5927\u5c0f \u4e0e \u5f53\u524d\u8282\u70b9\u7684\u5927\u5c0f \u7684\u6bd4\u503c\u5c0f\u4e8e \\(\\alpha\\) \uff0c\u5219\uff1a \u82e5\u5f53\u524d \u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\u7684\u5927\u5c0f \u4e0e \u5f53\u524d\u5de6\u513f\u5b50\u7684\u5927\u5c0f \u7684\u6bd4\u503c\u5927\u4e8e\u7b49\u4e8e \\(\\dfrac{1-2\\alpha}{1-\\alpha}\\) \uff0c\u5219\u8fdb\u884c\u53cc\u65cb\u3002 \u5426\u5219\u8fdb\u884c\u5355\u65cb\u3002 Code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void maintain ( PNODE T ){ if ( ! isLeaf ( T )){ if ( T -> lchild -> size < T -> size * alpha ) d = 1 ; else if ( T -> rchild -> size < T -> size * alpha ) d = 0 ; else return ; if ( d ){ if ( T -> rchild -> lchild -> size >= T -> rchild -> size * ( 1-2 * alpha ) / ( 1 - alpha )) rotate ( T -> rchild , ! d ); } else if ( T -> lchild -> rchild -> size >= T -> lchild -> size * ( 1-2 * alpha ) / ( 1 - alpha )) rotate ( T -> lchild , ! d ); rotate ( T , d ); pushup ( T ); } } \u5173\u4e8e\u5e73\u8861\u56e0\u5b50 \\(\\alpha\\) \u7684\u53d6\u503c\u95ee\u9898\uff0c\u5b9e\u9645\u4e0a\u53ea\u8981\u53d6\u5728\u533a\u95f4 \\([0,\\dfrac{3-\\sqrt{5}}{2}]\\) \u4e4b\u95f4\u7684\u8bdd\u90fd\u53ef\u4ee5\uff0c\u8bc1\u660e\u592a\u663e\u7136\u4e86\uff0c\u5728\u8fd9\u91cc\u53d7\u7bc7\u5e45\u9650\u5236\u5c31\u4e0d\u5c55\u5f00\u4e86\uff0c\u8bc1\u660e\u601d\u8def\u5c31\u8003\u8651\u533a\u95f4\u7684\u5b9a\u4e49\u5373\u53ef\uff0c\u5177\u4f53\u53c2\u89c1\u9ad8\u4e00\u96c6\u5408\u90e8\u5206\u3002\u4e2a\u4eba\u5b9e\u8df5\u5f97\u51fa \\(\\alpha\\) \u6700\u4f73\u53d6\u503c\u662f \\(0.2928\\) \uff0c\u4e0d\u8fc7\u5177\u4f53\u800c\u8a00\u5219\u662f\u56e0\u9898\u800c\u5f02\u3002 \u9644\u666e\u901a\u5e73\u8861\u6811\u677f\u5b50\uff1a \\(\\text{Code}\\)","title":"\u4e09\u3001\\(\\text{Weight Balanced Leafy Tree}\\)\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/WBLT/#textweight-balanced-leafy-tree_2","text":"\u65e2\u7136 \\(\\text{WBLT}\\) \u548c\u7ebf\u6bb5\u6811\u8fd9\u4e48\u50cf\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u6309\u7167\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\u5bf9\u5176\u8fdb\u884c\u533a\u95f4\u64cd\u4f5c\u5462\uff1f\u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u4ec5\u9488\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u6240\u80fd\u7ef4\u62a4\u7684\u64cd\u4f5c\u8fd9\u6837\u6253\u6807\u8bb0\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u5229\u7528 \\(\\text{WBLT}\\) \u8fc7\u6389\u7ebf\u6bb5\u6811\u677f\u677f\u9898\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u8fd9\u4e48\u5e72\uff0c\u4e0d\u8fc7\u788d\u4e8e\u7bc7\u5e45\u9650\u5236\uff0c\u6211\u5c31\u53ea\u597d\u5c06\u4ee3\u7801\u6254\u5230 \u4e91\u526a\u8d34\u677f \u91cc\u4e86\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u53bb\u770b\u770b\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u9047\u5230\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e0d\u4e86\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u7684 \\(\\text{WBLT}\\) \u5c31\u675f\u624b\u65e0\u7b56\u2026\u2026\u4e86\u5417\uff1f \u5176\u5b9e\u5e76\u6ca1\u6709\uff0c\u56e0\u4e3a \\(\\text{WBLT}\\) \u53ef\u4ee5\u5206\u88c2\u548c\u5408\u5e76\u7684\u7279\u6027\uff08\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u7279\u6027\u662f\u4ece\u7ebf\u6bb5\u6811\u7ee7\u627f\u8fc7\u6765\u7684\uff09\uff0c\u52a0\u4e4b\u5e73\u8861\u6811\u7684\u9ad8\u5ea6\u81ea\u7531\u6027\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u7528\u7c7b\u4f3c \\(\\text{FHQ Treap}\\) \u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u7ef4\u62a4\u4e00\u4e9b\u7ebf\u6bb5\u6811\u7279\u6027\u6240\u4e0d\u652f\u6301\u7684\u64cd\u4f5c\uff08\u56e0\u4e3a\u4ed6\u6bd5\u7adf\u4e0d\u80fd\u50cf \\(\\text{Splay}\\) \u90a3\u6837\u628a\u533a\u95f4\u65cb\u4e0a\u53bb\uff09\u3002 \u4e0d\u8fc7\uff0c \\(\\text{WBLT}\\) \u7684 \\(\\operatorname{Split}\\) \u548c \\(\\operatorname{Merge}\\) \u64cd\u4f5c\u5e76\u4e0d\u50cf \\(\\text{FHQ Treap}\\) \u90a3\u4e48\u597d\u5199\uff08\u5e76\u4e14\u5e38\u6570\u8fd8\u5927\u4e86\uff09\uff0c\u56e0\u4e3a \\(\\operatorname{Merge}\\) \u548c \\(\\operatorname{Split}\\) \u64cd\u4f5c\u6709\u53ef\u80fd\u4f1a\u8ba9\u539f\u5148\u7684 \\(\\text{WBLT}\\) \u5931\u53bb\u5176\u81ea\u8eab\u7684\u6027\u8d28\uff0c\u8fd9\u53ef\u80fd\u4e5f\u662f \\(\\text{WBLT}\\) \u4e3a\u6570\u4e0d\u591a\u7684\u75db\u70b9\u5427\uff08\u4e0d\u8fc7\u4e5f\u6709\u53ef\u80fd\u81ea\u5df1\u5199\u4e11\u4e86\uff09\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u8003\u8651\u5408\u5e76\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e24\u68f5\u6811 \\(A\\) \u548c \\(B\\) \uff1a \u82e5 \\(size_B \\ge size_A \\cdot \\alpha\\) \u5219\u76f4\u63a5\u5c06 \\(A\\) \u3001 \\(B\\) \u5408\u5e76\uff0c\u5373\u5c06 \\(A\\) \u8bbe\u4e3a\u53f3\u513f\u5b50\uff0c \\(B\\) \u8bbe\u4e3a\u5de6\u513f\u5b50\u3002 \u5426\u5219\uff0c\u8fdb\u884c\u4e0b\u8ff0\u64cd\u4f5c\uff1a \u82e5 \\(size_A \\ge size_B\\) \uff1a \u82e5\u5c06 \\(B\\) \u76f4\u63a5\u5408\u5e76\u5230 \\(A\\) \u7684\u53f3\u513f\u5b50\u80fd\u4fdd\u6301\u5e73\u8861\uff0c\u90a3\u5c31\u5408\u5e76\uff0c\u7136\u540e\u5176\u7ed3\u679c\u518d\u4e0e \\(A\\) \u7684\u5de6\u513f\u5b50\u5408\u5e76\u3002 \u5426\u5219\uff0c\u5c06 \\(A\\) \u7684\u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\u4e0e \\(A\\) \u7684\u53f3\u513f\u5b50\u8fdb\u884c\u5408\u5e76\uff0c\u5c06 \\(A\\) \u7684\u5de6\u513f\u5b50\u7684\u5de6\u513f\u5b50\u4e0e \\(B\\) \u8fdb\u884c\u5408\u5e76\uff0c\u518d\u5c06\u4e24\u8005\u7684\u5408\u5e76\u7ed3\u679c\u8fdb\u884c\u5408\u5e76\u3002 \u5426\u5219\uff1a \u82e5\u5c06 \\(A\\) \u76f4\u63a5\u5408\u5e76\u5230 \\(B\\) \u7684\u5de6\u513f\u5b50\u80fd\u4fdd\u6301\u5e73\u8861\uff0c\u90a3\u5c31\u5408\u5e76\uff0c\u7136\u540e\u5176\u7ed3\u679c\u518d\u4e0e \\(B\\) \u7684\u53f3\u513f\u5b50\u5408\u5e76\u3002 \u5426\u5219\uff0c\u5c06 \\(A\\) \u4e0e \\(B\\) \u7684\u5de6\u513f\u5b50\u7684\u5de6\u513f\u5b50\u5408\u5e76\uff0c\u5c06 \\(B\\) \u7684\u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\u4e0e \\(B\\) \u7684\u53f3\u513f\u5b50\u8fdb\u884c\u5408\u5e76\uff0c\u518d\u5c06\u4e24\u8005\u7684\u7ed3\u679c\u8fdb\u884c\u5408\u5e76\u3002 \u5b9e\u9645\u4e0a\uff0c \\(\\operatorname{Merge}\\) \u7684\u51fd\u6570\u5176\u5b9e\u672c\u8d28\u4e0a\u5c31\u662f\uff1a\u82e5\u4e24\u8005\u76f4\u63a5\u5408\u5e76\u5e73\u8861\uff0c\u5219\u76f4\u63a5\u5408\u5e76\uff0c\u5426\u5219\u5355\u65cb\u540e\u5408\u5e76\uff0c\u5426\u5219\u53cc\u65cb\u540e\u5408\u5e76\u3002 Code\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 inline PNODE Merge ( PNODE a , PNODE b ) //\u6253\u5927\u5199\u592a\u9ebb\u70e6\u4e86\uff0c\u53ea\u597d\u7528\u5c0f\u5199\u4e86/kel { if ( a == nullptr ) return b ; if ( b == nullptr ) return a ; if ( b -> size >= a -> size * alpha / ( 1 - alpha )) //\u80fd\u76f4\u63a5\u5408\u5e76\u5219\u76f4\u63a5\u5408\u5e76 return mix ( a , b ); PNODE ret = nullptr ; if ( a -> size > b -> size ){ pushdown ( a ); if ( a -> lchild -> size >= ( a -> size + b -> size ) * alpha ){ ret = Merge ( a -> lchild , Merge ( a -> rchild , b )); deleteNode ( a ); //\u6b64\u65f6\u539f\u8282\u70b9 a \u53d8\u6210\u4e86\u5783\u573e\u8282\u70b9\uff0c\u8981\u56de\u6536\u7a7a\u95f4 return ret ; } pushdown ( a -> rchild ); ret = Merge ( Merge ( a -> lchild , a -> rchild -> lchild ), Merge ( a -> rchild -> rchild , b )); deleteNode ( a ); //\u6b64\u65f6\u539f\u8282\u70b9 a \u53d8\u6210\u4e86\u5783\u573e\u8282\u70b9\uff0c\u8981\u56de\u6536\u7a7a\u95f4 return ret ; } else { pushdown ( b ); if ( b -> rchild -> size >= ( a -> size + b -> size ) * alpha ){ ret = Merge ( Merge ( a , b -> lchild ), b -> rchild ); deleteNode ( b ); //\u6b64\u65f6\u539f\u8282\u70b9 b \u53d8\u6210\u4e86\u5783\u573e\u8282\u70b9\uff0c\u8981\u56de\u6536\u7a7a\u95f4 return ret ; } pushdown ( b -> lchild ); ret = Merge ( Merge ( a , b -> lchild -> lchild ), Merge ( b -> lchild -> rchild , b -> rchild )); deleteNode ( b ); //\u6b64\u65f6\u539f\u8282\u70b9 b \u53d8\u6210\u4e86\u5783\u573e\u8282\u70b9\uff0c\u8981\u56de\u6536\u7a7a\u95f4 return ret ; } } \u6ce8\u610f\uff1a \\(\\boldsymbol{\\operatorname{Merge}}\\) \u64cd\u4f5c\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\u3002 \u6709\u4e86 \\(\\operatorname{Merge}\\) \u4e86\u4ee5\u540e\uff0c \\(\\operatorname{Split}\\) \u5c31\u597d\u5199\u591a\u4e86\uff08\u5b9e\u9645\u4e0a\u4e5f\u6ca1\u597d\u5199\u5230\u54ea\u91cc\u53bb\uff09\u3002 \\(\\text{WBLT}\\) \u7684 \\(\\operatorname{Split}\\) \u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff0c\u5206\u522b\u662f\u201c\u6309\u79e9\u5206\u88c2\u201d\u548c\u201c\u6309\u503c\u5206\u88c2\u201d\u3002 \u6211\u4eec\u5148\u8c08\u8c08\u6309\u79e9\u5206\u88c2\u3002 \u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c\u82e5\u5f53\u524d\u8fd8\u8981\u5206\u88c2\u7684\u5927\u5c0f\u4e3a \\(0\\) \u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u9700\u8981\u5206\u88c2\u5417\uff1f\u663e\u7136\u4e0d\u9700\u8981\u4e86\u3002\u6545\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5206\u88c2\u51fa\u6765\u7684\u6811 \\(X\\) \u7f6e\u4e3a\u7a7a\u3002 \u90a3\u4e48\u5982\u679c\u5f53\u524d\u8981\u5206\u88c2\u7684\u6811\u662f\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u663e\u7136\u4e5f\u4e0d\u9700\u8981\u5206\u7c7b\u4e86\uff0c\u76f4\u63a5\u5c06\u6811 \\(X\\) \u7f6e\u4e3a\u5f53\u524d\u6811 \\(T\\) \u5c31\u884c\u4e86\u3002 \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u9996\u5148\u5c06\u6807\u8bb0\u4e0b\u4f20\uff0c\u7136\u540e\u5982\u679c\u5f53\u524d\u5f85\u5206\u88c2\u7684\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8e\u6211\u4eec\u5de6\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u5219\u5148\u5c06\u5de6\u5b50\u6811\u5206\u88c2\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u6211\u4eec\u9700\u8981\u7684\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u5206\u5269\u4e0b\u7684\u3002 \u6b64\u65f6 Merge \u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u5c06\u5269\u4e0b\u7684\u548c\u6811 \\(T\\) \u7684\u5de6\u5b50\u6811\u8fdb\u884c\u5408\u5e76\uff0c\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\u53e6\u4e00\u90e8\u5206\u6811 \\(Y\\) \u3002 \u5bf9\u4e8e\u53f3\u5b50\u6811\uff0c\u6211\u4eec\u8fdb\u884c\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u5728\u5206\u88c2\u53f3\u5b50\u6811\u65f6\u6240\u7528\u7684\u5927\u5c0f\u5e94\u5f53\u662f\u539f\u5927\u5c0f\u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f\u3002 Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // \u5148\u884c\u6ce8\u610f\uff0c\u4f20\u53c2\u4e4b\u524d\u8bf7\u5148\u5c06\u5b50\u6811 X \u548c Y \u7f6e\u4e3a nullptr\u3002 void Split ( PNODE T , int x , PNODE & X , PNODE & Y ){ if ( ! x ){ Y = T ; return ; } if ( isLeaf ( T )){ X = T ; return ; } pushdown ( T ); if ( x <= X -> lchild -> size ){ PNODE bufY = nullptr ; Split ( T -> lchild , x , X , bufY ); Y = Merge ( bufY , T -> rchild ); } else { PNODE bufX = nullptr ; Split ( T -> rchild , x - T -> lchild -> size , bufX , Y ); X = Merge ( T -> lchild , bufX ); } } \u81f3\u4e8e\u6309\u503c\u5206\u88c2\uff0c\u5b9e\u9645\u4e0a\u548c\u6309\u79e9\u5206\u88c2\u662f\u4e00\u6a21\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u6309\u503c\u5206\u88c2\u4e0d\u9700\u8981\u5224\u65ad \\(x\\) \u662f\u5426\u4e3a \\(0\\) \uff0c\u4e14\u5206\u88c2\u53f3\u5b50\u6811\u7684\u65f6\u5019\u4e0d\u9700\u8981\u5c06 \\(x\\) \u51cf\u53bb\u5de6\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u5269\u4e0b\u5c31\u57fa\u672c\u4e0a\u4e00\u6a21\u4e00\u6837\u4e86\u3002\u788d\u4e8e\u7bc7\u5e45\u9650\u5236\uff0c\u6211\u4eec\u5c31\u4e0d\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u3002 \u6ce8\u610f\uff1a\u82e5 \\(\\operatorname{Merge}\\) \u548c \\(\\operatorname{Split}\\) \u6267\u884c\u6b21\u6570\u8fc7\u591a\uff0c\u5219\u4f1a\u4ea7\u751f\u65e0\u6cd5\u63a5\u53d7\u7684\u5783\u573e\u8282\u70b9\u6570\u91cf\uff0c\u6545\u6211\u4eec\u5728\u5199 \\(\\operatorname{Merge}\\) \u548c \\(\\operatorname{Split}\\) \u7684\u65f6\u5019\uff0c\u8bf7\u52a1\u5fc5\u505a\u597d\u5783\u573e\u56de\u6536\uff01\uff01 \u9644\u6587\u827a\u5e73\u8861\u6811\u4ee3\u7801\uff1a \\(\\text{Code}\\)","title":"\u56db\u3001\\(\\text{Weight Balanced Leafy Tree}\\) \u7684\u533a\u95f4\u64cd\u4f5c\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/WBLT/#textweight-balanced-leafy-tree_3","text":"\u5728\u8bb2 \\(\\text{WBLT}\\) \u7684\u53ef\u6301\u4e45\u5316\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8bb2\u70b9\u6574\u6d3b\u7684\u90e8\u5206\u3002 \u76ee\u524d\u597d\u50cf\u662f\u6ca1\u6709\u627e\u5230\u54ea\u4e00\u7bc7\u6587\u7ae0\u5199 \\(\\text{WBLT}\\) \u600e\u4e48\u5b9e\u73b0\u53ef\u5e76\u5806\uff0c\u4e0d\u8fc7\u53ef\u80fd\u662f\u56e0\u4e3a\u5176\u601d\u8def\u8fc7\u4e8e\u7b80\u5355\u6216\u8005\u662f\u5de6\u504f\u6811\u5b9e\u5728\u662f\u592a\u597d\u5199\u4e86\u3002 \u6309\u7167\u60ef\u4f8b\uff0c\u6211\u4eec\u5148\u6765\u56de\u987e\u4e00\u4e0b\u5806\u7684\u6027\u8d28\uff1a \u6839\u8282\u70b9\u5927\u4e8e\u7b49\u4e8e\u6216\u5c0f\u4e8e\u7b49\u4e8e\u5176\u6240\u6709\u7684\u513f\u5b50\u8282\u70b9 \u5806\u662f\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u7136\u540e\uff0c\u6211\u4eec\u628a\u76ee\u5149\u653e\u5230\u6240\u6709 \\(\\text{WBLT}\\) \u8282\u70b9\u4e0a\uff0c\u5c24\u5176\u662f\u975e\u53f6\u5b50\u8282\u70b9\u4e0a\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u5e73\u65f6\u5728\u5e73\u8861\u6811\u4e0a\u6240\u770b\u4e0d\u5230\u7684\u4e1c\u897f\uff1a \u7236\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u5176\u8868\u793a\u7684\u533a\u95f4\u7684\u6700\u5927\u503c\u3002 \u8bf6\uff0c\u7b49\u7b49\uff0c\u8fd9\u4e0d\u5c31\u610f\u5473\u7740\u7236\u8282\u70b9\u662f\u5b83\u6240\u4ee3\u8868\u7684\u533a\u95f4\u5185\u7684\u503c\u6700\u5927\u7684\u8282\u70b9\u5417\uff1f\u786e\u5b9e\uff0c\u6240\u4ee5\u6211\u4eec\u6b64\u65f6\u4e0d\u96be\u770b\u51fa\uff0c \\(\\text{WBLT}\\) \u7684\u672c\u8eab\u4e5f\u662f\u6ee1\u8db3\u5806\u7684\u6027\u8d28 \\(1\\) \u7684\u3002 \u81f3\u4e8e\u6027\u8d28 \\(2\\) \uff0c\u5144\u5f1f\uff0c\u8fd9\u662f\u5e73\u8861\u6811\u554a\uff01\uff01\u6240\u4ee5 \\(\\text{WBLT}\\) \u662f\u53ef\u4ee5\u5f53\u5806\u4f7f\u7684\u3002 \u53c8\u56e0\u4e3a \\(\\text{WBLT}\\) \u652f\u6301\u5408\u5e76\uff0c\u6240\u4ee5\u81ea\u7136\u800c\u7136\u7684\u5c31\u53ef\u4ee5\u505a\u53ef\u5e76\u5806\u6765\u4f7f\u4e86\u3002 \u788d\u4e8e\u7bc7\u5e45\u9650\u5236\uff0c\u6211\u5c06\u8fc7\u6389\u53ef\u5e76\u5806\u6a21\u677f\u9898\u7684\u4ee3\u7801\u653e\u5230 \u4e91\u526a\u8d34\u677f \u91cc\u9762\u4e86\uff0c\u6709\u5174\u8da3\u7684\u5927\u5bb6\u53ef\u4ee5\u53bb\u5eb7\u4e00\u5eb7\uff0c\u987a\u4fbf\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u6570\u636e\u80fd\u628a\u5b83\u5361\u6389\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002","title":"\u4e94\u3001\\(\\text{Weight Balanced Leafy Tree}\\) \u5b9e\u73b0\u53ef\u5e76\u5806\uff1a"}]}